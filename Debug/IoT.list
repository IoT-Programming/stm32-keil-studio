
IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004774  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004944  08004944  00005944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a4c  08004a4c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a54  08004a54  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a54  08004a54  00005a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a58  08004a58  00005a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a5c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08004ac4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004ac4  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f05b  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002277  00000000  00000000  000150f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00017370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b02  00000000  00000000  00018190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f54  00000000  00000000  00018c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f64  00000000  00000000  0003cbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df35d  00000000  00000000  0004db4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cea7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004314  00000000  00000000  0012ceec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00131200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800492c 	.word	0x0800492c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800492c 	.word	0x0800492c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <PulseSensor_Init>:
#include <stdint.h>

extern ADC_HandleTypeDef hadc1;

// PulseSensor 초기화 함수
void PulseSensor_Init(PulseSensor *sensor, uint16_t analogPin, uint16_t ledPin, int threshold) {
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	817b      	strh	r3, [r7, #10]
 80005ae:	4613      	mov	r3, r2
 80005b0:	813b      	strh	r3, [r7, #8]
    sensor->analogPin = analogPin;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	897a      	ldrh	r2, [r7, #10]
 80005b6:	801a      	strh	r2, [r3, #0]
    sensor->ledPin = ledPin;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	893a      	ldrh	r2, [r7, #8]
 80005bc:	805a      	strh	r2, [r3, #2]
    sensor->threshold = threshold;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	605a      	str	r2, [r3, #4]
    sensor->bpm = 0;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
    sensor->lastBeatTime = 0;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
    sensor->beatDetected = 0;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <PulseSensor_Begin>:

// 초기화 작업 시작
void PulseSensor_Begin(PulseSensor *sensor) {
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
    // 추가 초기화 작업 (필요 시 작성)
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <PulseSensor_SawStartOfBeat>:

// 새로운 비트 감지 여부 확인
int PulseSensor_SawStartOfBeat(PulseSensor *sensor) {
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
    if (sensor->beatDetected) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d004      	beq.n	8000610 <PulseSensor_SawStartOfBeat+0x1a>
        sensor->beatDetected = 0; // 상태 초기화
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
        return 1;
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <PulseSensor_SawStartOfBeat+0x1c>
    }
    return 0;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <PulseSensor_GetBeatsPerMinute>:

// 현재 BPM 값 반환
int PulseSensor_GetBeatsPerMinute(PulseSensor *sensor) {
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
    return sensor->bpm;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <PulseSensor_OnSampleTime>:

void PulseSensor_OnSampleTime(PulseSensor *sensor) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
    uint32_t value = PulseSensor_ReadADC(sensor); // ADC 값을 읽음
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f86b 	bl	800071c <PulseSensor_ReadADC>
 8000646:	60f8      	str	r0, [r7, #12]
    unsigned long currentTime = HAL_GetTick();   // 현재 시간(ms)을 가져옴
 8000648:	f000 fc88 	bl	8000f5c <HAL_GetTick>
 800064c:	60b8      	str	r0, [r7, #8]

    // 심박수 감지 로직
    if (value > sensor->threshold && !sensor->beatDetected) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	461a      	mov	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4293      	cmp	r3, r2
 8000658:	d92c      	bls.n	80006b4 <PulseSensor_OnSampleTime+0x7c>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d128      	bne.n	80006b4 <PulseSensor_OnSampleTime+0x7c>
        sensor->beatDetected = 1; // 비트 감지 상태 설정
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2201      	movs	r2, #1
 8000666:	611a      	str	r2, [r3, #16]

        // BPM 계산
        if (sensor->lastBeatTime != 0) { // 이전 비트 감지 시간이 있는 경우
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00a      	beq.n	8000686 <PulseSensor_OnSampleTime+0x4e>
            sensor->bpm = 60000 / (currentTime - sensor->lastBeatTime);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800067c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000680:	461a      	mov	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	609a      	str	r2, [r3, #8]
        }
        sensor->lastBeatTime = currentTime; // 마지막 비트 감지 시간 업데이트
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	60da      	str	r2, [r3, #12]

        // LED 깜박임 (비트 감지 시)
        HAL_GPIO_WritePin(GPIOC, sensor->ledPin, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	885b      	ldrh	r3, [r3, #2]
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	481f      	ldr	r0, [pc, #124]	@ (8000714 <PulseSensor_OnSampleTime+0xdc>)
 8000696:	f001 fb13 	bl	8001cc0 <HAL_GPIO_WritePin>

        // 디버깅 메시지 출력
        printf("ADC Value: %lu, Threshold: %d, Beat Detected: %d, BPM: %d\n",
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6919      	ldr	r1, [r3, #16]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	460b      	mov	r3, r1
 80006aa:	68f9      	ldr	r1, [r7, #12]
 80006ac:	481a      	ldr	r0, [pc, #104]	@ (8000718 <PulseSensor_OnSampleTime+0xe0>)
 80006ae:	f003 fa71 	bl	8003b94 <iprintf>
    if (value > sensor->threshold && !sensor->beatDetected) {
 80006b2:	e01f      	b.n	80006f4 <PulseSensor_OnSampleTime+0xbc>
               value, sensor->threshold, sensor->beatDetected, sensor->bpm);

    } else if (value <= sensor->threshold && sensor->beatDetected) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	461a      	mov	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4293      	cmp	r3, r2
 80006be:	d819      	bhi.n	80006f4 <PulseSensor_OnSampleTime+0xbc>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d015      	beq.n	80006f4 <PulseSensor_OnSampleTime+0xbc>
        // 신호가 Threshold 아래로 내려가면 비트 감지 상태 초기화
        sensor->beatDetected = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

        // LED 끄기 (비트 감지 종료 시)
        HAL_GPIO_WritePin(GPIOC, sensor->ledPin, GPIO_PIN_RESET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	885b      	ldrh	r3, [r3, #2]
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	480f      	ldr	r0, [pc, #60]	@ (8000714 <PulseSensor_OnSampleTime+0xdc>)
 80006d8:	f001 faf2 	bl	8001cc0 <HAL_GPIO_WritePin>

        // 디버깅 메시지 출력
        printf("ADC Value: %lu, Threshold: %d, Beat Detected: %d, BPM: %d\n",
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6919      	ldr	r1, [r3, #16]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	460b      	mov	r3, r1
 80006ec:	68f9      	ldr	r1, [r7, #12]
 80006ee:	480a      	ldr	r0, [pc, #40]	@ (8000718 <PulseSensor_OnSampleTime+0xe0>)
 80006f0:	f003 fa50 	bl	8003b94 <iprintf>
               value, sensor->threshold, sensor->beatDetected, sensor->bpm);
    }

    // 추가 디버깅용 출력 (상시 확인)
    printf("ADC Value: %lu, Threshold: %d, Beat Detected: %d, BPM: %d\n",
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6919      	ldr	r1, [r3, #16]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	460b      	mov	r3, r1
 8000704:	68f9      	ldr	r1, [r7, #12]
 8000706:	4804      	ldr	r0, [pc, #16]	@ (8000718 <PulseSensor_OnSampleTime+0xe0>)
 8000708:	f003 fa44 	bl	8003b94 <iprintf>
           value, sensor->threshold, sensor->beatDetected, sensor->bpm);
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40020800 	.word	0x40020800
 8000718:	08004944 	.word	0x08004944

0800071c <PulseSensor_ReadADC>:



uint32_t PulseSensor_ReadADC(PulseSensor *sensor) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
    sConfig.Channel = sensor->analogPin;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1; // ADC 순서
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800073c:	2301      	movs	r3, #1
 800073e:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	480e      	ldr	r0, [pc, #56]	@ (8000780 <PulseSensor_ReadADC+0x64>)
 8000748:	f000 fde6 	bl	8001318 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <PulseSensor_ReadADC+0x3a>
        Error_Handler();
 8000752:	f000 f9b9 	bl	8000ac8 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <PulseSensor_ReadADC+0x64>)
 8000758:	f000 fc74 	bl	8001044 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800075c:	f04f 31ff 	mov.w	r1, #4294967295
 8000760:	4807      	ldr	r0, [pc, #28]	@ (8000780 <PulseSensor_ReadADC+0x64>)
 8000762:	f000 fd41 	bl	80011e8 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <PulseSensor_ReadADC+0x64>)
 8000768:	f000 fdc9 	bl	80012fe <HAL_ADC_GetValue>
 800076c:	61f8      	str	r0, [r7, #28]

    printf("ADC Value: %lu\n", adcValue); // UART를 통해 ADC 값을 출력
 800076e:	69f9      	ldr	r1, [r7, #28]
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <PulseSensor_ReadADC+0x68>)
 8000772:	f003 fa0f 	bl	8003b94 <iprintf>
    return adcValue;
 8000776:	69fb      	ldr	r3, [r7, #28]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000084 	.word	0x20000084
 8000784:	08004980 	.word	0x08004980

08000788 <_write>:
void MX_TIM2_Init(void);
void MX_USART2_UART_Init(void);
void Error_Handler(void);

PulseSensor mySensor; // PulseSensor 객체
int _write(int file, char *data, int len) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	b29a      	uxth	r2, r3
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <_write+0x28>)
 80007a0:	f002 fd7a 	bl	8003298 <HAL_UART_Transmit>
    return len;
 80007a4:	687b      	ldr	r3, [r7, #4]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000cc 	.word	0x200000cc

080007b4 <main>:
int main(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
    HAL_Init(); // HAL 초기화
 80007ba:	f000 fb69 	bl	8000e90 <HAL_Init>
    SystemClock_Config(); // 시스템 클럭 설정
 80007be:	f000 f83f 	bl	8000840 <SystemClock_Config>

    // 주변 장치 초기화
    MX_GPIO_Init();
 80007c2:	f000 f885 	bl	80008d0 <MX_GPIO_Init>
    MX_ADC1_Init();
 80007c6:	f000 f8b1 	bl	800092c <MX_ADC1_Init>
    MX_TIM2_Init();
 80007ca:	f000 f8f1 	bl	80009b0 <MX_TIM2_Init>
    MX_USART2_UART_Init();
 80007ce:	f000 f939 	bl	8000a44 <MX_USART2_UART_Init>

    // PulseSensor 초기화
    PulseSensor_Init(&mySensor, ADC_CHANNEL_0, GPIO_PIN_13, 3100);
 80007d2:	f640 431c 	movw	r3, #3100	@ 0xc1c
 80007d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007da:	2100      	movs	r1, #0
 80007dc:	4813      	ldr	r0, [pc, #76]	@ (800082c <main+0x78>)
 80007de:	f7ff fedf 	bl	80005a0 <PulseSensor_Init>
    PulseSensor_Begin(&mySensor);
 80007e2:	4812      	ldr	r0, [pc, #72]	@ (800082c <main+0x78>)
 80007e4:	f7ff fefd 	bl	80005e2 <PulseSensor_Begin>

    // 타이머 인터럽트 시작
    HAL_TIM_Base_Start_IT(&htim2);
 80007e8:	4811      	ldr	r0, [pc, #68]	@ (8000830 <main+0x7c>)
 80007ea:	f002 f8df 	bl	80029ac <HAL_TIM_Base_Start_IT>

    while (1) {
    	if (PulseSensor_SawStartOfBeat(&mySensor)) {
 80007ee:	480f      	ldr	r0, [pc, #60]	@ (800082c <main+0x78>)
 80007f0:	f7ff ff01 	bl	80005f6 <PulseSensor_SawStartOfBeat>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00b      	beq.n	8000812 <main+0x5e>
    	    int bpm = PulseSensor_GetBeatsPerMinute(&mySensor);
 80007fa:	480c      	ldr	r0, [pc, #48]	@ (800082c <main+0x78>)
 80007fc:	f7ff ff0f 	bl	800061e <PulseSensor_GetBeatsPerMinute>
 8000800:	6078      	str	r0, [r7, #4]
    	    printf("♥ A Heartbeat Happened!\n"); // 심박 이벤트 메시지
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <main+0x80>)
 8000804:	f003 fa2e 	bl	8003c64 <puts>
    	    printf("BPM: %d\n", bpm); // BPM 출력
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	480b      	ldr	r0, [pc, #44]	@ (8000838 <main+0x84>)
 800080c:	f003 f9c2 	bl	8003b94 <iprintf>
 8000810:	e007      	b.n	8000822 <main+0x6e>
    	} else {
    	    printf("No Beat Detected. Current ADC Value: %lu\n", PulseSensor_ReadADC(&mySensor));
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <main+0x78>)
 8000814:	f7ff ff82 	bl	800071c <PulseSensor_ReadADC>
 8000818:	4603      	mov	r3, r0
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <main+0x88>)
 800081e:	f003 f9b9 	bl	8003b94 <iprintf>
    	}

        HAL_Delay(1000); // 20ms 지연
 8000822:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000826:	f000 fba5 	bl	8000f74 <HAL_Delay>
    	if (PulseSensor_SawStartOfBeat(&mySensor)) {
 800082a:	e7e0      	b.n	80007ee <main+0x3a>
 800082c:	2000015c 	.word	0x2000015c
 8000830:	20000114 	.word	0x20000114
 8000834:	08004990 	.word	0x08004990
 8000838:	080049ac 	.word	0x080049ac
 800083c:	080049b8 	.word	0x080049b8

08000840 <SystemClock_Config>:
    }
}


void SystemClock_Config(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b092      	sub	sp, #72	@ 0x48
 8000844:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2234      	movs	r2, #52	@ 0x34
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f003 fae8 	bl	8003e24 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

    // PLL 설정을 위한 구조체
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI; // HSI 오실레이터 사용
 8000862:	2302      	movs	r3, #2
 8000864:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;                  // HSI 활성화
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2310      	movs	r3, #16
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;              // PLL 활성화
 800086e:	2302      	movs	r3, #2
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;      // PLL 입력 소스 HSI
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLM = 16;                          // PLLM 설정
 8000876:	2310      	movs	r3, #16
 8000878:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 336;                         // PLLN 설정
 800087a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800087e:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;               // PLLP 설정
 8000880:	2304      	movs	r3, #4
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLQ = 7;                           // PLLQ 설정
 8000884:	2307      	movs	r3, #7
 8000886:	643b      	str	r3, [r7, #64]	@ 0x40

    // RCC 오실레이터 초기화
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fd9f 	bl	80023d0 <HAL_RCC_OscConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x5c>
        Error_Handler();
 8000898:	f000 f916 	bl	8000ac8 <Error_Handler>
    }

    // 클럭 설정
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800089c:	230f      	movs	r3, #15
 800089e:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // 시스템 클럭 소스 PLL
 80008a0:	2302      	movs	r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;        // AHB 클럭 분주비
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;         // APB1 클럭 분주비
 80008a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ac:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;         // APB2 클럭 분주비
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80008b4:	463b      	mov	r3, r7
 80008b6:	2105      	movs	r1, #5
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fa3f 	bl	8001d3c <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x88>
        Error_Handler();
 80008c4:	f000 f900 	bl	8000ac8 <Error_Handler>
    }
}
 80008c8:	bf00      	nop
 80008ca:	3748      	adds	r7, #72	@ 0x48
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <MX_GPIO_Init>:

void MX_GPIO_Init(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_GPIO_Init+0x54>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <MX_GPIO_Init+0x54>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <MX_GPIO_Init+0x54>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000904:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_GPIO_Init+0x58>)
 8000918:	f001 f83e 	bl	8001998 <HAL_GPIO_Init>
}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800

0800092c <MX_ADC1_Init>:

void MX_ADC1_Init(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

    hadc1.Instance = ADC1;
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_ADC1_Init+0x78>)
 8000940:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <MX_ADC1_Init+0x7c>)
 8000942:	601a      	str	r2, [r3, #0]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_ADC1_Init+0x78>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_ADC1_Init+0x78>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_ADC1_Init+0x78>)
 8000952:	2201      	movs	r2, #1
 8000954:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_ADC1_Init+0x78>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_ADC1_Init+0x78>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_ADC1_Init+0x78>)
 8000966:	4a11      	ldr	r2, [pc, #68]	@ (80009ac <MX_ADC1_Init+0x80>)
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800096a:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <MX_ADC1_Init+0x78>)
 800096c:	f000 fb26 	bl	8000fbc <HAL_ADC_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x4e>
        Error_Handler();
 8000976:	f000 f8a7 	bl	8000ac8 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_0;
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000982:	2301      	movs	r3, #1
 8000984:	60bb      	str	r3, [r7, #8]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <MX_ADC1_Init+0x78>)
 800098c:	f000 fcc4 	bl	8001318 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0x6e>
        Error_Handler();
 8000996:	f000 f897 	bl	8000ac8 <Error_Handler>
    }
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000084 	.word	0x20000084
 80009a8:	40012000 	.word	0x40012000
 80009ac:	0f000001 	.word	0x0f000001

080009b0 <MX_TIM2_Init>:

void MX_TIM2_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]

    htim2.Instance = TIM2;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_TIM2_Init+0x90>)
 80009ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d2:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7999;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_TIM2_Init+0x90>)
 80009d6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80009da:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_TIM2_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1999;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_TIM2_Init+0x90>)
 80009e4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80009e8:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_TIM2_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009f0:	4813      	ldr	r0, [pc, #76]	@ (8000a40 <MX_TIM2_Init+0x90>)
 80009f2:	f001 ff8b 	bl	800290c <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x50>
        Error_Handler();
 80009fc:	f000 f864 	bl	8000ac8 <Error_Handler>
    }

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	60bb      	str	r3, [r7, #8]

    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <MX_TIM2_Init+0x90>)
 8000a0e:	f002 f92d 	bl	8002c6c <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x6c>
        Error_Handler();
 8000a18:	f000 f856 	bl	8000ac8 <Error_Handler>
    }

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]

    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000a24:	463b      	mov	r3, r7
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_TIM2_Init+0x90>)
 8000a2a:	f002 fb55 	bl	80030d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x88>
        Error_Handler();
 8000a34:	f000 f848 	bl	8000ac8 <Error_Handler>
    }
}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000114 	.word	0x20000114

08000a44 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <MX_USART2_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	f002 fbbc 	bl	80031f8 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8000a86:	f000 f81f 	bl	8000ac8 <Error_Handler>
    }
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000cc 	.word	0x200000cc
 8000a94:	40004400 	.word	0x40004400

08000a98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa8:	d105      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x1e>
        PulseSensor_OnSampleTime(&mySensor);
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000aac:	f7ff fdc4 	bl	8000638 <PulseSensor_OnSampleTime>
        printf("Timer interrupt triggered.\n"); // 타이머 인터럽트 확인
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ab2:	f003 f8d7 	bl	8003c64 <puts>
    }
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000015c 	.word	0x2000015c
 8000ac4:	080049e4 	.word	0x080049e4

08000ac8 <Error_Handler>:

void Error_Handler(void) {
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
    while (1) {
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x4>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 ff00 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	@ (8000b9c <HAL_ADC_MspInit+0x7c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d127      	bne.n	8000b92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_ADC_MspInit+0x84>)
 8000b8e:	f000 ff03 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb8:	d115      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x48>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x48>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x48>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 fea5 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be0:	201c      	movs	r0, #28
 8000be2:	f000 febe 	bl	8001962 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_UART_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <HAL_UART_MspInit+0x8c>)
 8000c6a:	f000 fe95 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cda:	f000 f92b 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <TIM2_IRQHandler+0x10>)
 8000cea:	f001 fecf 	bl	8002a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000114 	.word	0x20000114

08000cf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cfc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d00:	f000 fff8 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e00a      	b.n	8000d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d1a:	f3af 8000 	nop.w
 8000d1e:	4601      	mov	r1, r0
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	60ba      	str	r2, [r7, #8]
 8000d26:	b2ca      	uxtb	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf0      	blt.n	8000d1a <_read+0x12>
  }

  return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_isatty>:

int _isatty(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f003 f870 	bl	8003ec0 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20020000 	.word	0x20020000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	20000170 	.word	0x20000170
 8000e14:	200002c8 	.word	0x200002c8

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e40:	f7ff ffea 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f003 f82f 	bl	8003ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fca1 	bl	80007b4 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e80:	08004a5c 	.word	0x08004a5c
  ldr r2, =_sbss
 8000e84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e88:	200002c4 	.word	0x200002c4

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 fd2b 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fe04 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fd43 	bl	800197e <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 fd0b 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000174 	.word	0x20000174

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000174 	.word	0x20000174

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e033      	b.n	800103a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fda0 	bl	8000b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d118      	bne.n	800102c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001002:	f023 0302 	bic.w	r3, r3, #2
 8001006:	f043 0202 	orr.w	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fab4 	bl	800157c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	@ 0x40
 800102a:	e001      	b.n	8001030 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_ADC_Start+0x1a>
 800105a:	2302      	movs	r3, #2
 800105c:	e0b2      	b.n	80011c4 <HAL_ADC_Start+0x180>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d018      	beq.n	80010a6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001084:	4b52      	ldr	r3, [pc, #328]	@ (80011d0 <HAL_ADC_Start+0x18c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a52      	ldr	r2, [pc, #328]	@ (80011d4 <HAL_ADC_Start+0x190>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9a      	lsrs	r2, r3, #18
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001098:	e002      	b.n	80010a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	3b01      	subs	r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f9      	bne.n	800109a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d17a      	bne.n	80011aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010f2:	d106      	bne.n	8001102 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f8:	f023 0206 	bic.w	r2, r3, #6
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001100:	e002      	b.n	8001108 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001110:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <HAL_ADC_Start+0x194>)
 8001112:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800111c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	2b00      	cmp	r3, #0
 8001128:	d12a      	bne.n	8001180 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a2b      	ldr	r2, [pc, #172]	@ (80011dc <HAL_ADC_Start+0x198>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d015      	beq.n	8001160 <HAL_ADC_Start+0x11c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a29      	ldr	r2, [pc, #164]	@ (80011e0 <HAL_ADC_Start+0x19c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d105      	bne.n	800114a <HAL_ADC_Start+0x106>
 800113e:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <HAL_ADC_Start+0x194>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a25      	ldr	r2, [pc, #148]	@ (80011e4 <HAL_ADC_Start+0x1a0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d136      	bne.n	80011c2 <HAL_ADC_Start+0x17e>
 8001154:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <HAL_ADC_Start+0x194>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	d130      	bne.n	80011c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d129      	bne.n	80011c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	e020      	b.n	80011c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <HAL_ADC_Start+0x198>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d11b      	bne.n	80011c2 <HAL_ADC_Start+0x17e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d114      	bne.n	80011c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e00b      	b.n	80011c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f043 0210 	orr.w	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20000000 	.word	0x20000000
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	40012300 	.word	0x40012300
 80011dc:	40012000 	.word	0x40012000
 80011e0:	40012100 	.word	0x40012100
 80011e4:	40012200 	.word	0x40012200

080011e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001204:	d113      	bne.n	800122e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001214:	d10b      	bne.n	800122e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f043 0220 	orr.w	r2, r3, #32
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e063      	b.n	80012f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800122e:	f7ff fe95 	bl	8000f5c <HAL_GetTick>
 8001232:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001234:	e021      	b.n	800127a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d01d      	beq.n	800127a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_ADC_PollForConversion+0x6c>
 8001244:	f7ff fe8a 	bl	8000f5c <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d212      	bcs.n	800127a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b02      	cmp	r3, #2
 8001260:	d00b      	beq.n	800127a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f043 0204 	orr.w	r2, r3, #4
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e03d      	b.n	80012f6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d1d6      	bne.n	8001236 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0212 	mvn.w	r2, #18
 8001290:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d123      	bne.n	80012f4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d11f      	bne.n	80012f4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	f043 0201 	orr.w	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1c>
 8001330:	2302      	movs	r3, #2
 8001332:	e113      	b.n	800155c <HAL_ADC_ConfigChannel+0x244>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b09      	cmp	r3, #9
 8001342:	d925      	bls.n	8001390 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	3b1e      	subs	r3, #30
 800135a:	2207      	movs	r2, #7
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43da      	mvns	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	400a      	ands	r2, r1
 8001368:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68d9      	ldr	r1, [r3, #12]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	4603      	mov	r3, r0
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4403      	add	r3, r0
 8001382:	3b1e      	subs	r3, #30
 8001384:	409a      	lsls	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	e022      	b.n	80013d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6919      	ldr	r1, [r3, #16]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	2207      	movs	r2, #7
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6919      	ldr	r1, [r3, #16]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	409a      	lsls	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d824      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b05      	subs	r3, #5
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b05      	subs	r3, #5
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	635a      	str	r2, [r3, #52]	@ 0x34
 8001426:	e04c      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d824      	bhi.n	800147a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b23      	subs	r3, #35	@ 0x23
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b23      	subs	r3, #35	@ 0x23
 800146c:	fa00 f203 	lsl.w	r2, r0, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
 8001478:	e023      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b41      	subs	r3, #65	@ 0x41
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b41      	subs	r3, #65	@ 0x41
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c2:	4b29      	ldr	r3, [pc, #164]	@ (8001568 <HAL_ADC_ConfigChannel+0x250>)
 80014c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a28      	ldr	r2, [pc, #160]	@ (800156c <HAL_ADC_ConfigChannel+0x254>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d10f      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d8>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b12      	cmp	r3, #18
 80014d6:	d10b      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	@ (800156c <HAL_ADC_ConfigChannel+0x254>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12b      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <HAL_ADC_ConfigChannel+0x258>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d003      	beq.n	800150c <HAL_ADC_ConfigChannel+0x1f4>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b11      	cmp	r3, #17
 800150a:	d122      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a11      	ldr	r2, [pc, #68]	@ (8001570 <HAL_ADC_ConfigChannel+0x258>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d111      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_ADC_ConfigChannel+0x25c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a11      	ldr	r2, [pc, #68]	@ (8001578 <HAL_ADC_ConfigChannel+0x260>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9a      	lsrs	r2, r3, #18
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001544:	e002      	b.n	800154c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40012300 	.word	0x40012300
 800156c:	40012000 	.word	0x40012000
 8001570:	10000012 	.word	0x10000012
 8001574:	20000000 	.word	0x20000000
 8001578:	431bde83 	.word	0x431bde83

0800157c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001584:	4b79      	ldr	r3, [pc, #484]	@ (800176c <ADC_Init+0x1f0>)
 8001586:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	021a      	lsls	r2, r3, #8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160e:	4a58      	ldr	r2, [pc, #352]	@ (8001770 <ADC_Init+0x1f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e00f      	b.n	800167a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001678:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0202 	bic.w	r2, r2, #2
 8001688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6899      	ldr	r1, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	005a      	lsls	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	3b01      	subs	r3, #1
 80016d4:	035a      	lsls	r2, r3, #13
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	e007      	b.n	80016f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	3b01      	subs	r3, #1
 800170c:	051a      	lsls	r2, r3, #20
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001732:	025a      	lsls	r2, r3, #9
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800174a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	029a      	lsls	r2, r3, #10
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	609a      	str	r2, [r3, #8]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40012300 	.word	0x40012300
 8001770:	0f000001 	.word	0x0f000001

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	@ (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff3e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e165      	b.n	8001c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f040 8154 	bne.w	8001c7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d005      	beq.n	80019ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d130      	bne.n	8001a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0201 	and.w	r2, r3, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d017      	beq.n	8001a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d123      	bne.n	8001adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80ae 	beq.w	8001c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <HAL_GPIO_Init+0x300>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	4a5c      	ldr	r2, [pc, #368]	@ (8001c98 <HAL_GPIO_Init+0x300>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c98 <HAL_GPIO_Init+0x300>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3a:	4a58      	ldr	r2, [pc, #352]	@ (8001c9c <HAL_GPIO_Init+0x304>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca0 <HAL_GPIO_Init+0x308>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x21a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca4 <HAL_GPIO_Init+0x30c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x216>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca8 <HAL_GPIO_Init+0x310>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x212>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	@ (8001cac <HAL_GPIO_Init+0x314>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb0 <HAL_GPIO_Init+0x318>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x20a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb4 <HAL_GPIO_Init+0x31c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x206>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	@ (8001cb8 <HAL_GPIO_Init+0x320>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x202>
 8001b96:	2306      	movs	r3, #6
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	@ (8001c9c <HAL_GPIO_Init+0x304>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a31      	ldr	r2, [pc, #196]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a26      	ldr	r2, [pc, #152]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a11      	ldr	r2, [pc, #68]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f ae96 	bls.w	80019b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f806 	bl	8001d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40013c00 	.word	0x40013c00

08001d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0cc      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b68      	ldr	r3, [pc, #416]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d90c      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b65      	ldr	r3, [pc, #404]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b8      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b59      	ldr	r3, [pc, #356]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a58      	ldr	r2, [pc, #352]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a52      	ldr	r2, [pc, #328]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b50      	ldr	r3, [pc, #320]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	494d      	ldr	r1, [pc, #308]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d044      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b47      	ldr	r3, [pc, #284]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d119      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e07f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e067      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b37      	ldr	r3, [pc, #220]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4934      	ldr	r1, [pc, #208]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff f896 	bl	8000f5c <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff f892 	bl	8000f5c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e04f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20c      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e032      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4916      	ldr	r1, [pc, #88]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	490e      	ldr	r1, [pc, #56]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec2:	f000 f855 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	490a      	ldr	r1, [pc, #40]	@ (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	5ccb      	ldrb	r3, [r1, r3]
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fff6 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08004a00 	.word	0x08004a00
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000

08001f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f24:	f7ff fff0 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0a9b      	lsrs	r3, r3, #10
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	@ (8001f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08004a10 	.word	0x08004a10

08001f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f4c:	f7ff ffdc 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0b5b      	lsrs	r3, r3, #13
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	@ (8001f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08004a10 	.word	0x08004a10

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f74:	b0ae      	sub	sp, #184	@ 0xb8
 8001f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f96:	4bcb      	ldr	r3, [pc, #812]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	f200 8206 	bhi.w	80023b0 <HAL_RCC_GetSysClockFreq+0x440>
 8001fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fac <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001faa:	bf00      	nop
 8001fac:	08001fe1 	.word	0x08001fe1
 8001fb0:	080023b1 	.word	0x080023b1
 8001fb4:	080023b1 	.word	0x080023b1
 8001fb8:	080023b1 	.word	0x080023b1
 8001fbc:	08001fe9 	.word	0x08001fe9
 8001fc0:	080023b1 	.word	0x080023b1
 8001fc4:	080023b1 	.word	0x080023b1
 8001fc8:	080023b1 	.word	0x080023b1
 8001fcc:	08001ff1 	.word	0x08001ff1
 8001fd0:	080023b1 	.word	0x080023b1
 8001fd4:	080023b1 	.word	0x080023b1
 8001fd8:	080023b1 	.word	0x080023b1
 8001fdc:	080021e1 	.word	0x080021e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe0:	4bb9      	ldr	r3, [pc, #740]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fe6:	e1e7      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe8:	4bb8      	ldr	r3, [pc, #736]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fee:	e1e3      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff0:	4bb4      	ldr	r3, [pc, #720]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ffc:	4bb1      	ldr	r3, [pc, #708]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d071      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002008:	4bae      	ldr	r3, [pc, #696]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	2200      	movs	r2, #0
 8002010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002014:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800201c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002020:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800202a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800202e:	4622      	mov	r2, r4
 8002030:	462b      	mov	r3, r5
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f04f 0100 	mov.w	r1, #0
 800203a:	0159      	lsls	r1, r3, #5
 800203c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002040:	0150      	lsls	r0, r2, #5
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4621      	mov	r1, r4
 8002048:	1a51      	subs	r1, r2, r1
 800204a:	6439      	str	r1, [r7, #64]	@ 0x40
 800204c:	4629      	mov	r1, r5
 800204e:	eb63 0301 	sbc.w	r3, r3, r1
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002060:	4649      	mov	r1, r9
 8002062:	018b      	lsls	r3, r1, #6
 8002064:	4641      	mov	r1, r8
 8002066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800206a:	4641      	mov	r1, r8
 800206c:	018a      	lsls	r2, r1, #6
 800206e:	4641      	mov	r1, r8
 8002070:	1a51      	subs	r1, r2, r1
 8002072:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002074:	4649      	mov	r1, r9
 8002076:	eb63 0301 	sbc.w	r3, r3, r1
 800207a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002088:	4649      	mov	r1, r9
 800208a:	00cb      	lsls	r3, r1, #3
 800208c:	4641      	mov	r1, r8
 800208e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002092:	4641      	mov	r1, r8
 8002094:	00ca      	lsls	r2, r1, #3
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	4603      	mov	r3, r0
 800209c:	4622      	mov	r2, r4
 800209e:	189b      	adds	r3, r3, r2
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80020a2:	462b      	mov	r3, r5
 80020a4:	460a      	mov	r2, r1
 80020a6:	eb42 0303 	adc.w	r3, r2, r3
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020b8:	4629      	mov	r1, r5
 80020ba:	024b      	lsls	r3, r1, #9
 80020bc:	4621      	mov	r1, r4
 80020be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020c2:	4621      	mov	r1, r4
 80020c4:	024a      	lsls	r2, r1, #9
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ce:	2200      	movs	r2, #0
 80020d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020dc:	f7fe f8e8 	bl	80002b0 <__aeabi_uldivmod>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4613      	mov	r3, r2
 80020e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020ea:	e067      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ec:	4b75      	ldr	r3, [pc, #468]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002104:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002106:	2300      	movs	r3, #0
 8002108:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800210a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800210e:	4622      	mov	r2, r4
 8002110:	462b      	mov	r3, r5
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	0159      	lsls	r1, r3, #5
 800211c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002120:	0150      	lsls	r0, r2, #5
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4621      	mov	r1, r4
 8002128:	1a51      	subs	r1, r2, r1
 800212a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800212c:	4629      	mov	r1, r5
 800212e:	eb63 0301 	sbc.w	r3, r3, r1
 8002132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002140:	4649      	mov	r1, r9
 8002142:	018b      	lsls	r3, r1, #6
 8002144:	4641      	mov	r1, r8
 8002146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800214a:	4641      	mov	r1, r8
 800214c:	018a      	lsls	r2, r1, #6
 800214e:	4641      	mov	r1, r8
 8002150:	ebb2 0a01 	subs.w	sl, r2, r1
 8002154:	4649      	mov	r1, r9
 8002156:	eb63 0b01 	sbc.w	fp, r3, r1
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002166:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800216a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216e:	4692      	mov	sl, r2
 8002170:	469b      	mov	fp, r3
 8002172:	4623      	mov	r3, r4
 8002174:	eb1a 0303 	adds.w	r3, sl, r3
 8002178:	623b      	str	r3, [r7, #32]
 800217a:	462b      	mov	r3, r5
 800217c:	eb4b 0303 	adc.w	r3, fp, r3
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800218e:	4629      	mov	r1, r5
 8002190:	028b      	lsls	r3, r1, #10
 8002192:	4621      	mov	r1, r4
 8002194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002198:	4621      	mov	r1, r4
 800219a:	028a      	lsls	r2, r1, #10
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021a4:	2200      	movs	r2, #0
 80021a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80021a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80021aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80021ae:	f7fe f87f 	bl	80002b0 <__aeabi_uldivmod>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4613      	mov	r3, r2
 80021b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021bc:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	3301      	adds	r3, #1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021de:	e0eb      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b38      	ldr	r3, [pc, #224]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ec:	4b35      	ldr	r3, [pc, #212]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d06b      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f8:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	2200      	movs	r2, #0
 8002200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002202:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220a:	663b      	str	r3, [r7, #96]	@ 0x60
 800220c:	2300      	movs	r3, #0
 800220e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002210:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002214:	4622      	mov	r2, r4
 8002216:	462b      	mov	r3, r5
 8002218:	f04f 0000 	mov.w	r0, #0
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	0159      	lsls	r1, r3, #5
 8002222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002226:	0150      	lsls	r0, r2, #5
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4621      	mov	r1, r4
 800222e:	1a51      	subs	r1, r2, r1
 8002230:	61b9      	str	r1, [r7, #24]
 8002232:	4629      	mov	r1, r5
 8002234:	eb63 0301 	sbc.w	r3, r3, r1
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002246:	4659      	mov	r1, fp
 8002248:	018b      	lsls	r3, r1, #6
 800224a:	4651      	mov	r1, sl
 800224c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002250:	4651      	mov	r1, sl
 8002252:	018a      	lsls	r2, r1, #6
 8002254:	4651      	mov	r1, sl
 8002256:	ebb2 0801 	subs.w	r8, r2, r1
 800225a:	4659      	mov	r1, fp
 800225c:	eb63 0901 	sbc.w	r9, r3, r1
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800226c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002270:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002274:	4690      	mov	r8, r2
 8002276:	4699      	mov	r9, r3
 8002278:	4623      	mov	r3, r4
 800227a:	eb18 0303 	adds.w	r3, r8, r3
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	462b      	mov	r3, r5
 8002282:	eb49 0303 	adc.w	r3, r9, r3
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002294:	4629      	mov	r1, r5
 8002296:	024b      	lsls	r3, r1, #9
 8002298:	4621      	mov	r1, r4
 800229a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800229e:	4621      	mov	r1, r4
 80022a0:	024a      	lsls	r2, r1, #9
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022aa:	2200      	movs	r2, #0
 80022ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022b4:	f7fd fffc 	bl	80002b0 <__aeabi_uldivmod>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4613      	mov	r3, r2
 80022be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022c2:	e065      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x420>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d0:	4b3d      	ldr	r3, [pc, #244]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	2200      	movs	r2, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	4611      	mov	r1, r2
 80022dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80022e2:	2300      	movs	r3, #0
 80022e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80022e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022ea:	4642      	mov	r2, r8
 80022ec:	464b      	mov	r3, r9
 80022ee:	f04f 0000 	mov.w	r0, #0
 80022f2:	f04f 0100 	mov.w	r1, #0
 80022f6:	0159      	lsls	r1, r3, #5
 80022f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022fc:	0150      	lsls	r0, r2, #5
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4641      	mov	r1, r8
 8002304:	1a51      	subs	r1, r2, r1
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	4649      	mov	r1, r9
 800230a:	eb63 0301 	sbc.w	r3, r3, r1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800231c:	4659      	mov	r1, fp
 800231e:	018b      	lsls	r3, r1, #6
 8002320:	4651      	mov	r1, sl
 8002322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002326:	4651      	mov	r1, sl
 8002328:	018a      	lsls	r2, r1, #6
 800232a:	4651      	mov	r1, sl
 800232c:	1a54      	subs	r4, r2, r1
 800232e:	4659      	mov	r1, fp
 8002330:	eb63 0501 	sbc.w	r5, r3, r1
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	00eb      	lsls	r3, r5, #3
 800233e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002342:	00e2      	lsls	r2, r4, #3
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	4643      	mov	r3, r8
 800234a:	18e3      	adds	r3, r4, r3
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	464b      	mov	r3, r9
 8002350:	eb45 0303 	adc.w	r3, r5, r3
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002362:	4629      	mov	r1, r5
 8002364:	028b      	lsls	r3, r1, #10
 8002366:	4621      	mov	r1, r4
 8002368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800236c:	4621      	mov	r1, r4
 800236e:	028a      	lsls	r2, r1, #10
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002378:	2200      	movs	r2, #0
 800237a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800237c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800237e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002382:	f7fd ff95 	bl	80002b0 <__aeabi_uldivmod>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4613      	mov	r3, r2
 800238c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002390:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	0f1b      	lsrs	r3, r3, #28
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800239e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023ae:	e003      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80023b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	37b8      	adds	r7, #184	@ 0xb8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	00f42400 	.word	0x00f42400

080023d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e28d      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8083 	beq.w	80024f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023f0:	4b94      	ldr	r3, [pc, #592]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d019      	beq.n	8002430 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023fc:	4b91      	ldr	r3, [pc, #580]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
        || \
 8002404:	2b08      	cmp	r3, #8
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002408:	4b8e      	ldr	r3, [pc, #568]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002414:	d00c      	beq.n	8002430 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4b8b      	ldr	r3, [pc, #556]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d112      	bne.n	8002448 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b88      	ldr	r3, [pc, #544]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800242e:	d10b      	bne.n	8002448 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	4b84      	ldr	r3, [pc, #528]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d05b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x124>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d157      	bne.n	80024f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e25a      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x90>
 8002452:	4b7c      	ldr	r3, [pc, #496]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7b      	ldr	r2, [pc, #492]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xcc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0xb4>
 800246a:	4b76      	ldr	r3, [pc, #472]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a75      	ldr	r2, [pc, #468]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b73      	ldr	r3, [pc, #460]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a72      	ldr	r2, [pc, #456]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xcc>
 8002484:	4b6f      	ldr	r3, [pc, #444]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6e      	ldr	r2, [pc, #440]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b6c      	ldr	r3, [pc, #432]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6b      	ldr	r2, [pc, #428]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fd5a 	bl	8000f5c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fd56 	bl	8000f5c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e21f      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b61      	ldr	r3, [pc, #388]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xdc>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fd46 	bl	8000f5c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe fd42 	bl	8000f5c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e20b      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b57      	ldr	r3, [pc, #348]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x104>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d06f      	beq.n	80025e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002502:	4b50      	ldr	r3, [pc, #320]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d017      	beq.n	800253e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800250e:	4b4d      	ldr	r3, [pc, #308]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
        || \
 8002516:	2b08      	cmp	r3, #8
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800251a:	4b4a      	ldr	r3, [pc, #296]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b47      	ldr	r3, [pc, #284]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d11c      	bne.n	800256c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002532:	4b44      	ldr	r3, [pc, #272]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d116      	bne.n	800256c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	4b41      	ldr	r3, [pc, #260]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_RCC_OscConfig+0x186>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e1d3      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	4b3b      	ldr	r3, [pc, #236]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4937      	ldr	r1, [pc, #220]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	e03a      	b.n	80025e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002574:	4b34      	ldr	r3, [pc, #208]	@ (8002648 <HAL_RCC_OscConfig+0x278>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7fe fcef 	bl	8000f5c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002582:	f7fe fceb 	bl	8000f5c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e1b4      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	4b2b      	ldr	r3, [pc, #172]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b28      	ldr	r3, [pc, #160]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4925      	ldr	r1, [pc, #148]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]
 80025b4:	e015      	b.n	80025e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b6:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_RCC_OscConfig+0x278>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fcce 	bl	8000f5c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c4:	f7fe fcca 	bl	8000f5c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e193      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d036      	beq.n	800265c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d016      	beq.n	8002624 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <HAL_RCC_OscConfig+0x27c>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fcae 	bl	8000f5c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7fe fcaa 	bl	8000f5c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e173      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <HAL_RCC_OscConfig+0x274>)
 8002618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x234>
 8002622:	e01b      	b.n	800265c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <HAL_RCC_OscConfig+0x27c>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fc97 	bl	8000f5c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	e00e      	b.n	8002650 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7fe fc93 	bl	8000f5c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d907      	bls.n	8002650 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e15c      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
 8002644:	40023800 	.word	0x40023800
 8002648:	42470000 	.word	0x42470000
 800264c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	4b8a      	ldr	r3, [pc, #552]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1ea      	bne.n	8002632 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8097 	beq.w	8002798 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266e:	4b83      	ldr	r3, [pc, #524]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b7f      	ldr	r3, [pc, #508]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	4a7e      	ldr	r2, [pc, #504]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002688:	6413      	str	r3, [r2, #64]	@ 0x40
 800268a:	4b7c      	ldr	r3, [pc, #496]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	4b79      	ldr	r3, [pc, #484]	@ (8002880 <HAL_RCC_OscConfig+0x4b0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d118      	bne.n	80026d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a6:	4b76      	ldr	r3, [pc, #472]	@ (8002880 <HAL_RCC_OscConfig+0x4b0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a75      	ldr	r2, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x4b0>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fc53 	bl	8000f5c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ba:	f7fe fc4f 	bl	8000f5c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e118      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002880 <HAL_RCC_OscConfig+0x4b0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x31e>
 80026e0:	4b66      	ldr	r3, [pc, #408]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e4:	4a65      	ldr	r2, [pc, #404]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ec:	e01c      	b.n	8002728 <HAL_RCC_OscConfig+0x358>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x340>
 80026f6:	4b61      	ldr	r3, [pc, #388]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	4a60      	ldr	r2, [pc, #384]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	@ 0x70
 8002702:	4b5e      	ldr	r3, [pc, #376]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	4a5d      	ldr	r2, [pc, #372]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	@ 0x70
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0x358>
 8002710:	4b5a      	ldr	r3, [pc, #360]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	4a59      	ldr	r2, [pc, #356]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	@ 0x70
 800271c:	4b57      	ldr	r3, [pc, #348]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002720:	4a56      	ldr	r2, [pc, #344]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002722:	f023 0304 	bic.w	r3, r3, #4
 8002726:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe fc14 	bl	8000f5c <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe fc10 	bl	8000f5c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0d7      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0ee      	beq.n	8002738 <HAL_RCC_OscConfig+0x368>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fbfe 	bl	8000f5c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fbfa 	bl	8000f5c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0c1      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277a:	4b40      	ldr	r3, [pc, #256]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ee      	bne.n	8002764 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	4a3a      	ldr	r2, [pc, #232]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002796:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80ad 	beq.w	80028fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027a2:	4b36      	ldr	r3, [pc, #216]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d060      	beq.n	8002870 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d145      	bne.n	8002842 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	4b33      	ldr	r3, [pc, #204]	@ (8002884 <HAL_RCC_OscConfig+0x4b4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fbce 	bl	8000f5c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fe fbca 	bl	8000f5c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e093      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	4b29      	ldr	r3, [pc, #164]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	019b      	lsls	r3, r3, #6
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	085b      	lsrs	r3, r3, #1
 80027fa:	3b01      	subs	r3, #1
 80027fc:	041b      	lsls	r3, r3, #16
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	071b      	lsls	r3, r3, #28
 800280e:	491b      	ldr	r1, [pc, #108]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x4b4>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fb9f 	bl	8000f5c <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe fb9b 	bl	8000f5c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e064      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x452>
 8002840:	e05c      	b.n	80028fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_RCC_OscConfig+0x4b4>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fb88 	bl	8000f5c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fb84 	bl	8000f5c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e04d      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_RCC_OscConfig+0x4ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x480>
 800286e:	e045      	b.n	80028fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e040      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
 800287c:	40023800 	.word	0x40023800
 8002880:	40007000 	.word	0x40007000
 8002884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002888:	4b1f      	ldr	r3, [pc, #124]	@ (8002908 <HAL_RCC_OscConfig+0x538>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d030      	beq.n	80028f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d129      	bne.n	80028f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d122      	bne.n	80028f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028b8:	4013      	ands	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d119      	bne.n	80028f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	3b01      	subs	r3, #1
 80028d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d10f      	bne.n	80028f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800

0800290c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e041      	b.n	80029a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe f938 	bl	8000ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3304      	adds	r3, #4
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f000 fa7e 	bl	8002e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d001      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e04e      	b.n	8002a62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a23      	ldr	r2, [pc, #140]	@ (8002a70 <HAL_TIM_Base_Start_IT+0xc4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d022      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ee:	d01d      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a74 <HAL_TIM_Base_Start_IT+0xc8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d018      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002a78 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <HAL_TIM_Base_Start_IT+0xd0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00e      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d111      	bne.n	8002a50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d010      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	e007      	b.n	8002a60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	40000c00 	.word	0x40000c00
 8002a80:	40010400 	.word	0x40010400
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40001800 	.word	0x40001800

08002a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0202 	mvn.w	r2, #2
 8002ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f999 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f98b 	bl	8002dfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f99c 	bl	8002e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d020      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0204 	mvn.w	r2, #4
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f973 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f965 	bl	8002dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f976 	bl	8002e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d020      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0208 	mvn.w	r2, #8
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f94d 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002b74:	e005      	b.n	8002b82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f93f 	bl	8002dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f950 	bl	8002e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d020      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0210 	mvn.w	r2, #16
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f927 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f919 	bl	8002dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f92a 	bl	8002e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0201 	mvn.w	r2, #1
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd ff50 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fae4 	bl	80031e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00c      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8fb 	bl	8002e36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00c      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0220 	mvn.w	r2, #32
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fab6 	bl	80031d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_ConfigClockSource+0x1c>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0b4      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x186>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc0:	d03e      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0xd4>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc6:	f200 8087 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cce:	f000 8086 	beq.w	8002dde <HAL_TIM_ConfigClockSource+0x172>
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd6:	d87f      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b70      	cmp	r3, #112	@ 0x70
 8002cda:	d01a      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0xa6>
 8002cdc:	2b70      	cmp	r3, #112	@ 0x70
 8002cde:	d87b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b60      	cmp	r3, #96	@ 0x60
 8002ce2:	d050      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x11a>
 8002ce4:	2b60      	cmp	r3, #96	@ 0x60
 8002ce6:	d877      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b50      	cmp	r3, #80	@ 0x50
 8002cea:	d03c      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0xfa>
 8002cec:	2b50      	cmp	r3, #80	@ 0x50
 8002cee:	d873      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf0:	2b40      	cmp	r3, #64	@ 0x40
 8002cf2:	d058      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x13a>
 8002cf4:	2b40      	cmp	r3, #64	@ 0x40
 8002cf6:	d86f      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf8:	2b30      	cmp	r3, #48	@ 0x30
 8002cfa:	d064      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cfc:	2b30      	cmp	r3, #48	@ 0x30
 8002cfe:	d86b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d060      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d867      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05c      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d05a      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d10:	e062      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d22:	f000 f9b9 	bl	8003098 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	609a      	str	r2, [r3, #8]
      break;
 8002d3e:	e04f      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d50:	f000 f9a2 	bl	8003098 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d62:	609a      	str	r2, [r3, #8]
      break;
 8002d64:	e03c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 f916 	bl	8002fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2150      	movs	r1, #80	@ 0x50
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f96f 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002d84:	e02c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 f935 	bl	8003002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2160      	movs	r1, #96	@ 0x60
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f95f 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002da4:	e01c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f8f6 	bl	8002fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2140      	movs	r1, #64	@ 0x40
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f94f 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e00c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f000 f946 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002dd6:	e003      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e000      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a46      	ldr	r2, [pc, #280]	@ (8002f78 <TIM_Base_SetConfig+0x12c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d013      	beq.n	8002e8c <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6a:	d00f      	beq.n	8002e8c <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a43      	ldr	r2, [pc, #268]	@ (8002f7c <TIM_Base_SetConfig+0x130>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <TIM_Base_SetConfig+0x40>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a42      	ldr	r2, [pc, #264]	@ (8002f80 <TIM_Base_SetConfig+0x134>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <TIM_Base_SetConfig+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a41      	ldr	r2, [pc, #260]	@ (8002f84 <TIM_Base_SetConfig+0x138>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_Base_SetConfig+0x40>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a40      	ldr	r2, [pc, #256]	@ (8002f88 <TIM_Base_SetConfig+0x13c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d108      	bne.n	8002e9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a35      	ldr	r2, [pc, #212]	@ (8002f78 <TIM_Base_SetConfig+0x12c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d02b      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eac:	d027      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a32      	ldr	r2, [pc, #200]	@ (8002f7c <TIM_Base_SetConfig+0x130>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d023      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a31      	ldr	r2, [pc, #196]	@ (8002f80 <TIM_Base_SetConfig+0x134>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01f      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a30      	ldr	r2, [pc, #192]	@ (8002f84 <TIM_Base_SetConfig+0x138>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01b      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8002f88 <TIM_Base_SetConfig+0x13c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d017      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8002f8c <TIM_Base_SetConfig+0x140>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8002f90 <TIM_Base_SetConfig+0x144>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00f      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f94 <TIM_Base_SetConfig+0x148>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00b      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <TIM_Base_SetConfig+0x14c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d007      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f9c <TIM_Base_SetConfig+0x150>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d003      	beq.n	8002efe <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a29      	ldr	r2, [pc, #164]	@ (8002fa0 <TIM_Base_SetConfig+0x154>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d108      	bne.n	8002f10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <TIM_Base_SetConfig+0x12c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0xf8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a12      	ldr	r2, [pc, #72]	@ (8002f88 <TIM_Base_SetConfig+0x13c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d103      	bne.n	8002f4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800
 8002f84:	40000c00 	.word	0x40000c00
 8002f88:	40010400 	.word	0x40010400
 8002f8c:	40014000 	.word	0x40014000
 8002f90:	40014400 	.word	0x40014400
 8002f94:	40014800 	.word	0x40014800
 8002f98:	40001800 	.word	0x40001800
 8002f9c:	40001c00 	.word	0x40001c00
 8002fa0:	40002000 	.word	0x40002000

08002fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f023 0201 	bic.w	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f023 030a 	bic.w	r3, r3, #10
 8002fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	621a      	str	r2, [r3, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003002:	b480      	push	{r7}
 8003004:	b087      	sub	sp, #28
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 0210 	bic.w	r2, r3, #16
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800302c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	031b      	lsls	r3, r3, #12
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800303e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	f043 0307 	orr.w	r3, r3, #7
 8003084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	021a      	lsls	r2, r3, #8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e05a      	b.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a21      	ldr	r2, [pc, #132]	@ (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313c:	d01d      	beq.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1d      	ldr	r2, [pc, #116]	@ (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1b      	ldr	r2, [pc, #108]	@ (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1a      	ldr	r2, [pc, #104]	@ (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a18      	ldr	r2, [pc, #96]	@ (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a17      	ldr	r2, [pc, #92]	@ (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a15      	ldr	r2, [pc, #84]	@ (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d10c      	bne.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4313      	orrs	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40010400 	.word	0x40010400
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40001800 	.word	0x40001800

080031d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e042      	b.n	8003290 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd fce8 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	@ 0x24
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800323a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f973 	bl	8003528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d175      	bne.n	80033a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_UART_Transmit+0x2c>
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e06e      	b.n	80033a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	@ 0x21
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d6:	f7fd fe41 	bl	8000f5c <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f0:	d108      	bne.n	8003304 <HAL_UART_Transmit+0x6c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e003      	b.n	800330c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800330c:	e02e      	b.n	800336c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	@ 0x80
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f848 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e03a      	b.n	80033a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3302      	adds	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e007      	b.n	800335e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1cb      	bne.n	800330e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	2140      	movs	r1, #64	@ 0x40
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f814 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e006      	b.n	80033a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	e03b      	b.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c6:	d037      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fd fdc8 	bl	8000f5c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <UART_WaitOnFlagUntilTimeout+0x30>
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e03a      	b.n	8003458 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d023      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b80      	cmp	r3, #128	@ 0x80
 80033f4:	d020      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	d01d      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b08      	cmp	r3, #8
 8003408:	d116      	bne.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f81d 	bl	8003460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2208      	movs	r2, #8
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e00f      	b.n	8003458 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	429a      	cmp	r2, r3
 8003454:	d0b4      	beq.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b095      	sub	sp, #84	@ 0x54
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800347e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003488:	643a      	str	r2, [r7, #64]	@ 0x40
 800348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800348e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e5      	bne.n	800349c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d119      	bne.n	800350c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 0310 	bic.w	r3, r3, #16
 80034ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f8:	61ba      	str	r2, [r7, #24]
 80034fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6979      	ldr	r1, [r7, #20]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	613b      	str	r3, [r7, #16]
   return(result);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e5      	bne.n	80034d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800351a:	bf00      	nop
 800351c:	3754      	adds	r7, #84	@ 0x54
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b0c0      	sub	sp, #256	@ 0x100
 800352e:	af00      	add	r7, sp, #0
 8003530:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003544:	68d9      	ldr	r1, [r3, #12]
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	ea40 0301 	orr.w	r3, r0, r1
 8003550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003580:	f021 010c 	bic.w	r1, r1, #12
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800358e:	430b      	orrs	r3, r1
 8003590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a2:	6999      	ldr	r1, [r3, #24]
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	ea40 0301 	orr.w	r3, r0, r1
 80035ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b8f      	ldr	r3, [pc, #572]	@ (80037f4 <UART_SetConfig+0x2cc>)
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d005      	beq.n	80035c8 <UART_SetConfig+0xa0>
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b8d      	ldr	r3, [pc, #564]	@ (80037f8 <UART_SetConfig+0x2d0>)
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d104      	bne.n	80035d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7fe fcbe 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 80035cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035d0:	e003      	b.n	80035da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d2:	f7fe fca5 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 80035d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035e4:	f040 810c 	bne.w	8003800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	1891      	adds	r1, r2, r2
 8003600:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003602:	415b      	adcs	r3, r3
 8003604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800360a:	4621      	mov	r1, r4
 800360c:	eb12 0801 	adds.w	r8, r2, r1
 8003610:	4629      	mov	r1, r5
 8003612:	eb43 0901 	adc.w	r9, r3, r1
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362a:	4690      	mov	r8, r2
 800362c:	4699      	mov	r9, r3
 800362e:	4623      	mov	r3, r4
 8003630:	eb18 0303 	adds.w	r3, r8, r3
 8003634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003638:	462b      	mov	r3, r5
 800363a:	eb49 0303 	adc.w	r3, r9, r3
 800363e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800364e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003656:	460b      	mov	r3, r1
 8003658:	18db      	adds	r3, r3, r3
 800365a:	653b      	str	r3, [r7, #80]	@ 0x50
 800365c:	4613      	mov	r3, r2
 800365e:	eb42 0303 	adc.w	r3, r2, r3
 8003662:	657b      	str	r3, [r7, #84]	@ 0x54
 8003664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800366c:	f7fc fe20 	bl	80002b0 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4b61      	ldr	r3, [pc, #388]	@ (80037fc <UART_SetConfig+0x2d4>)
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	011c      	lsls	r4, r3, #4
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003688:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800368c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003698:	415b      	adcs	r3, r3
 800369a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800369c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036a0:	4641      	mov	r1, r8
 80036a2:	eb12 0a01 	adds.w	sl, r2, r1
 80036a6:	4649      	mov	r1, r9
 80036a8:	eb43 0b01 	adc.w	fp, r3, r1
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c0:	4692      	mov	sl, r2
 80036c2:	469b      	mov	fp, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036ce:	464b      	mov	r3, r9
 80036d0:	eb4b 0303 	adc.w	r3, fp, r3
 80036d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036ec:	460b      	mov	r3, r1
 80036ee:	18db      	adds	r3, r3, r3
 80036f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036f2:	4613      	mov	r3, r2
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003702:	f7fc fdd5 	bl	80002b0 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4611      	mov	r1, r2
 800370c:	4b3b      	ldr	r3, [pc, #236]	@ (80037fc <UART_SetConfig+0x2d4>)
 800370e:	fba3 2301 	umull	r2, r3, r3, r1
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2264      	movs	r2, #100	@ 0x64
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	1acb      	subs	r3, r1, r3
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003722:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <UART_SetConfig+0x2d4>)
 8003724:	fba3 2302 	umull	r2, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003730:	441c      	add	r4, r3
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800373c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800374c:	415b      	adcs	r3, r3
 800374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6339      	str	r1, [r7, #48]	@ 0x30
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037a8:	460b      	mov	r3, r1
 80037aa:	18db      	adds	r3, r3, r3
 80037ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ae:	4613      	mov	r3, r2
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037be:	f7fc fd77 	bl	80002b0 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <UART_SetConfig+0x2d4>)
 80037c8:	fba3 1302 	umull	r1, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2164      	movs	r1, #100	@ 0x64
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3332      	adds	r3, #50	@ 0x32
 80037da:	4a08      	ldr	r2, [pc, #32]	@ (80037fc <UART_SetConfig+0x2d4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 0207 	and.w	r2, r3, #7
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4422      	add	r2, r4
 80037ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f0:	e106      	b.n	8003a00 <UART_SetConfig+0x4d8>
 80037f2:	bf00      	nop
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40011400 	.word	0x40011400
 80037fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800380a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800380e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003812:	4642      	mov	r2, r8
 8003814:	464b      	mov	r3, r9
 8003816:	1891      	adds	r1, r2, r2
 8003818:	6239      	str	r1, [r7, #32]
 800381a:	415b      	adcs	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
 800381e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003822:	4641      	mov	r1, r8
 8003824:	1854      	adds	r4, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb43 0501 	adc.w	r5, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	00eb      	lsls	r3, r5, #3
 8003836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383a:	00e2      	lsls	r2, r4, #3
 800383c:	4614      	mov	r4, r2
 800383e:	461d      	mov	r5, r3
 8003840:	4643      	mov	r3, r8
 8003842:	18e3      	adds	r3, r4, r3
 8003844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003848:	464b      	mov	r3, r9
 800384a:	eb45 0303 	adc.w	r3, r5, r3
 800384e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800385e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800386e:	4629      	mov	r1, r5
 8003870:	008b      	lsls	r3, r1, #2
 8003872:	4621      	mov	r1, r4
 8003874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003878:	4621      	mov	r1, r4
 800387a:	008a      	lsls	r2, r1, #2
 800387c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003880:	f7fc fd16 	bl	80002b0 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b60      	ldr	r3, [pc, #384]	@ (8003a0c <UART_SetConfig+0x4e4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	011c      	lsls	r4, r3, #4
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800389c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	61b9      	str	r1, [r7, #24]
 80038ac:	415b      	adcs	r3, r3
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b4:	4641      	mov	r1, r8
 80038b6:	1851      	adds	r1, r2, r1
 80038b8:	6139      	str	r1, [r7, #16]
 80038ba:	4649      	mov	r1, r9
 80038bc:	414b      	adcs	r3, r1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038cc:	4659      	mov	r1, fp
 80038ce:	00cb      	lsls	r3, r1, #3
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d6:	4651      	mov	r1, sl
 80038d8:	00ca      	lsls	r2, r1, #3
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	4642      	mov	r2, r8
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038e8:	464b      	mov	r3, r9
 80038ea:	460a      	mov	r2, r1
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800390c:	4649      	mov	r1, r9
 800390e:	008b      	lsls	r3, r1, #2
 8003910:	4641      	mov	r1, r8
 8003912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003916:	4641      	mov	r1, r8
 8003918:	008a      	lsls	r2, r1, #2
 800391a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800391e:	f7fc fcc7 	bl	80002b0 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4611      	mov	r1, r2
 8003928:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <UART_SetConfig+0x4e4>)
 800392a:	fba3 2301 	umull	r2, r3, r3, r1
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2264      	movs	r2, #100	@ 0x64
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	1acb      	subs	r3, r1, r3
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	3332      	adds	r3, #50	@ 0x32
 800393c:	4a33      	ldr	r2, [pc, #204]	@ (8003a0c <UART_SetConfig+0x4e4>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003948:	441c      	add	r4, r3
 800394a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394e:	2200      	movs	r2, #0
 8003950:	673b      	str	r3, [r7, #112]	@ 0x70
 8003952:	677a      	str	r2, [r7, #116]	@ 0x74
 8003954:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	415b      	adcs	r3, r3
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003968:	4641      	mov	r1, r8
 800396a:	1851      	adds	r1, r2, r1
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	4649      	mov	r1, r9
 8003970:	414b      	adcs	r3, r1
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003980:	4659      	mov	r1, fp
 8003982:	00cb      	lsls	r3, r1, #3
 8003984:	4651      	mov	r1, sl
 8003986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398a:	4651      	mov	r1, sl
 800398c:	00ca      	lsls	r2, r1, #3
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	4603      	mov	r3, r0
 8003994:	4642      	mov	r2, r8
 8003996:	189b      	adds	r3, r3, r2
 8003998:	66bb      	str	r3, [r7, #104]	@ 0x68
 800399a:	464b      	mov	r3, r9
 800399c:	460a      	mov	r2, r1
 800399e:	eb42 0303 	adc.w	r3, r2, r3
 80039a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80039ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039bc:	4649      	mov	r1, r9
 80039be:	008b      	lsls	r3, r1, #2
 80039c0:	4641      	mov	r1, r8
 80039c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c6:	4641      	mov	r1, r8
 80039c8:	008a      	lsls	r2, r1, #2
 80039ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039ce:	f7fc fc6f 	bl	80002b0 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a0c <UART_SetConfig+0x4e4>)
 80039d8:	fba3 1302 	umull	r1, r3, r3, r2
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	2164      	movs	r1, #100	@ 0x64
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	3332      	adds	r3, #50	@ 0x32
 80039ea:	4a08      	ldr	r2, [pc, #32]	@ (8003a0c <UART_SetConfig+0x4e4>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4422      	add	r2, r4
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a06:	46bd      	mov	sp, r7
 8003a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0c:	51eb851f 	.word	0x51eb851f

08003a10 <std>:
 8003a10:	2300      	movs	r3, #0
 8003a12:	b510      	push	{r4, lr}
 8003a14:	4604      	mov	r4, r0
 8003a16:	e9c0 3300 	strd	r3, r3, [r0]
 8003a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a1e:	6083      	str	r3, [r0, #8]
 8003a20:	8181      	strh	r1, [r0, #12]
 8003a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a24:	81c2      	strh	r2, [r0, #14]
 8003a26:	6183      	str	r3, [r0, #24]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	305c      	adds	r0, #92	@ 0x5c
 8003a2e:	f000 f9f9 	bl	8003e24 <memset>
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <std+0x58>)
 8003a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a36:	4b0d      	ldr	r3, [pc, #52]	@ (8003a6c <std+0x5c>)
 8003a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <std+0x60>)
 8003a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <std+0x64>)
 8003a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a42:	4b0d      	ldr	r3, [pc, #52]	@ (8003a78 <std+0x68>)
 8003a44:	6224      	str	r4, [r4, #32]
 8003a46:	429c      	cmp	r4, r3
 8003a48:	d006      	beq.n	8003a58 <std+0x48>
 8003a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a4e:	4294      	cmp	r4, r2
 8003a50:	d002      	beq.n	8003a58 <std+0x48>
 8003a52:	33d0      	adds	r3, #208	@ 0xd0
 8003a54:	429c      	cmp	r4, r3
 8003a56:	d105      	bne.n	8003a64 <std+0x54>
 8003a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a60:	f000 ba58 	b.w	8003f14 <__retarget_lock_init_recursive>
 8003a64:	bd10      	pop	{r4, pc}
 8003a66:	bf00      	nop
 8003a68:	08003c75 	.word	0x08003c75
 8003a6c:	08003c97 	.word	0x08003c97
 8003a70:	08003ccf 	.word	0x08003ccf
 8003a74:	08003cf3 	.word	0x08003cf3
 8003a78:	20000178 	.word	0x20000178

08003a7c <stdio_exit_handler>:
 8003a7c:	4a02      	ldr	r2, [pc, #8]	@ (8003a88 <stdio_exit_handler+0xc>)
 8003a7e:	4903      	ldr	r1, [pc, #12]	@ (8003a8c <stdio_exit_handler+0x10>)
 8003a80:	4803      	ldr	r0, [pc, #12]	@ (8003a90 <stdio_exit_handler+0x14>)
 8003a82:	f000 b869 	b.w	8003b58 <_fwalk_sglue>
 8003a86:	bf00      	nop
 8003a88:	2000000c 	.word	0x2000000c
 8003a8c:	080047b5 	.word	0x080047b5
 8003a90:	2000001c 	.word	0x2000001c

08003a94 <cleanup_stdio>:
 8003a94:	6841      	ldr	r1, [r0, #4]
 8003a96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <cleanup_stdio+0x34>)
 8003a98:	4299      	cmp	r1, r3
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	d001      	beq.n	8003aa4 <cleanup_stdio+0x10>
 8003aa0:	f000 fe88 	bl	80047b4 <_fflush_r>
 8003aa4:	68a1      	ldr	r1, [r4, #8]
 8003aa6:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <cleanup_stdio+0x38>)
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	d002      	beq.n	8003ab2 <cleanup_stdio+0x1e>
 8003aac:	4620      	mov	r0, r4
 8003aae:	f000 fe81 	bl	80047b4 <_fflush_r>
 8003ab2:	68e1      	ldr	r1, [r4, #12]
 8003ab4:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <cleanup_stdio+0x3c>)
 8003ab6:	4299      	cmp	r1, r3
 8003ab8:	d004      	beq.n	8003ac4 <cleanup_stdio+0x30>
 8003aba:	4620      	mov	r0, r4
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac0:	f000 be78 	b.w	80047b4 <_fflush_r>
 8003ac4:	bd10      	pop	{r4, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000178 	.word	0x20000178
 8003acc:	200001e0 	.word	0x200001e0
 8003ad0:	20000248 	.word	0x20000248

08003ad4 <global_stdio_init.part.0>:
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <global_stdio_init.part.0+0x30>)
 8003ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8003b08 <global_stdio_init.part.0+0x34>)
 8003ada:	4a0c      	ldr	r2, [pc, #48]	@ (8003b0c <global_stdio_init.part.0+0x38>)
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	4620      	mov	r0, r4
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2104      	movs	r1, #4
 8003ae4:	f7ff ff94 	bl	8003a10 <std>
 8003ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003aec:	2201      	movs	r2, #1
 8003aee:	2109      	movs	r1, #9
 8003af0:	f7ff ff8e 	bl	8003a10 <std>
 8003af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003af8:	2202      	movs	r2, #2
 8003afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003afe:	2112      	movs	r1, #18
 8003b00:	f7ff bf86 	b.w	8003a10 <std>
 8003b04:	200002b0 	.word	0x200002b0
 8003b08:	20000178 	.word	0x20000178
 8003b0c:	08003a7d 	.word	0x08003a7d

08003b10 <__sfp_lock_acquire>:
 8003b10:	4801      	ldr	r0, [pc, #4]	@ (8003b18 <__sfp_lock_acquire+0x8>)
 8003b12:	f000 ba00 	b.w	8003f16 <__retarget_lock_acquire_recursive>
 8003b16:	bf00      	nop
 8003b18:	200002b9 	.word	0x200002b9

08003b1c <__sfp_lock_release>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	@ (8003b24 <__sfp_lock_release+0x8>)
 8003b1e:	f000 b9fb 	b.w	8003f18 <__retarget_lock_release_recursive>
 8003b22:	bf00      	nop
 8003b24:	200002b9 	.word	0x200002b9

08003b28 <__sinit>:
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	f7ff fff0 	bl	8003b10 <__sfp_lock_acquire>
 8003b30:	6a23      	ldr	r3, [r4, #32]
 8003b32:	b11b      	cbz	r3, 8003b3c <__sinit+0x14>
 8003b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b38:	f7ff bff0 	b.w	8003b1c <__sfp_lock_release>
 8003b3c:	4b04      	ldr	r3, [pc, #16]	@ (8003b50 <__sinit+0x28>)
 8003b3e:	6223      	str	r3, [r4, #32]
 8003b40:	4b04      	ldr	r3, [pc, #16]	@ (8003b54 <__sinit+0x2c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f5      	bne.n	8003b34 <__sinit+0xc>
 8003b48:	f7ff ffc4 	bl	8003ad4 <global_stdio_init.part.0>
 8003b4c:	e7f2      	b.n	8003b34 <__sinit+0xc>
 8003b4e:	bf00      	nop
 8003b50:	08003a95 	.word	0x08003a95
 8003b54:	200002b0 	.word	0x200002b0

08003b58 <_fwalk_sglue>:
 8003b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b5c:	4607      	mov	r7, r0
 8003b5e:	4688      	mov	r8, r1
 8003b60:	4614      	mov	r4, r2
 8003b62:	2600      	movs	r6, #0
 8003b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b68:	f1b9 0901 	subs.w	r9, r9, #1
 8003b6c:	d505      	bpl.n	8003b7a <_fwalk_sglue+0x22>
 8003b6e:	6824      	ldr	r4, [r4, #0]
 8003b70:	2c00      	cmp	r4, #0
 8003b72:	d1f7      	bne.n	8003b64 <_fwalk_sglue+0xc>
 8003b74:	4630      	mov	r0, r6
 8003b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7a:	89ab      	ldrh	r3, [r5, #12]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d907      	bls.n	8003b90 <_fwalk_sglue+0x38>
 8003b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b84:	3301      	adds	r3, #1
 8003b86:	d003      	beq.n	8003b90 <_fwalk_sglue+0x38>
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	47c0      	blx	r8
 8003b8e:	4306      	orrs	r6, r0
 8003b90:	3568      	adds	r5, #104	@ 0x68
 8003b92:	e7e9      	b.n	8003b68 <_fwalk_sglue+0x10>

08003b94 <iprintf>:
 8003b94:	b40f      	push	{r0, r1, r2, r3}
 8003b96:	b507      	push	{r0, r1, r2, lr}
 8003b98:	4906      	ldr	r1, [pc, #24]	@ (8003bb4 <iprintf+0x20>)
 8003b9a:	ab04      	add	r3, sp, #16
 8003b9c:	6808      	ldr	r0, [r1, #0]
 8003b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ba2:	6881      	ldr	r1, [r0, #8]
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	f000 fadb 	bl	8004160 <_vfiprintf_r>
 8003baa:	b003      	add	sp, #12
 8003bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bb0:	b004      	add	sp, #16
 8003bb2:	4770      	bx	lr
 8003bb4:	20000018 	.word	0x20000018

08003bb8 <_puts_r>:
 8003bb8:	6a03      	ldr	r3, [r0, #32]
 8003bba:	b570      	push	{r4, r5, r6, lr}
 8003bbc:	6884      	ldr	r4, [r0, #8]
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	460e      	mov	r6, r1
 8003bc2:	b90b      	cbnz	r3, 8003bc8 <_puts_r+0x10>
 8003bc4:	f7ff ffb0 	bl	8003b28 <__sinit>
 8003bc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bca:	07db      	lsls	r3, r3, #31
 8003bcc:	d405      	bmi.n	8003bda <_puts_r+0x22>
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	0598      	lsls	r0, r3, #22
 8003bd2:	d402      	bmi.n	8003bda <_puts_r+0x22>
 8003bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bd6:	f000 f99e 	bl	8003f16 <__retarget_lock_acquire_recursive>
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	0719      	lsls	r1, r3, #28
 8003bde:	d502      	bpl.n	8003be6 <_puts_r+0x2e>
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d135      	bne.n	8003c52 <_puts_r+0x9a>
 8003be6:	4621      	mov	r1, r4
 8003be8:	4628      	mov	r0, r5
 8003bea:	f000 f8c5 	bl	8003d78 <__swsetup_r>
 8003bee:	b380      	cbz	r0, 8003c52 <_puts_r+0x9a>
 8003bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8003bf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bf6:	07da      	lsls	r2, r3, #31
 8003bf8:	d405      	bmi.n	8003c06 <_puts_r+0x4e>
 8003bfa:	89a3      	ldrh	r3, [r4, #12]
 8003bfc:	059b      	lsls	r3, r3, #22
 8003bfe:	d402      	bmi.n	8003c06 <_puts_r+0x4e>
 8003c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c02:	f000 f989 	bl	8003f18 <__retarget_lock_release_recursive>
 8003c06:	4628      	mov	r0, r5
 8003c08:	bd70      	pop	{r4, r5, r6, pc}
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	da04      	bge.n	8003c18 <_puts_r+0x60>
 8003c0e:	69a2      	ldr	r2, [r4, #24]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	dc17      	bgt.n	8003c44 <_puts_r+0x8c>
 8003c14:	290a      	cmp	r1, #10
 8003c16:	d015      	beq.n	8003c44 <_puts_r+0x8c>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	6022      	str	r2, [r4, #0]
 8003c1e:	7019      	strb	r1, [r3, #0]
 8003c20:	68a3      	ldr	r3, [r4, #8]
 8003c22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c26:	3b01      	subs	r3, #1
 8003c28:	60a3      	str	r3, [r4, #8]
 8003c2a:	2900      	cmp	r1, #0
 8003c2c:	d1ed      	bne.n	8003c0a <_puts_r+0x52>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da11      	bge.n	8003c56 <_puts_r+0x9e>
 8003c32:	4622      	mov	r2, r4
 8003c34:	210a      	movs	r1, #10
 8003c36:	4628      	mov	r0, r5
 8003c38:	f000 f85f 	bl	8003cfa <__swbuf_r>
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d0d7      	beq.n	8003bf0 <_puts_r+0x38>
 8003c40:	250a      	movs	r5, #10
 8003c42:	e7d7      	b.n	8003bf4 <_puts_r+0x3c>
 8003c44:	4622      	mov	r2, r4
 8003c46:	4628      	mov	r0, r5
 8003c48:	f000 f857 	bl	8003cfa <__swbuf_r>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d1e7      	bne.n	8003c20 <_puts_r+0x68>
 8003c50:	e7ce      	b.n	8003bf0 <_puts_r+0x38>
 8003c52:	3e01      	subs	r6, #1
 8003c54:	e7e4      	b.n	8003c20 <_puts_r+0x68>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	6022      	str	r2, [r4, #0]
 8003c5c:	220a      	movs	r2, #10
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e7ee      	b.n	8003c40 <_puts_r+0x88>
	...

08003c64 <puts>:
 8003c64:	4b02      	ldr	r3, [pc, #8]	@ (8003c70 <puts+0xc>)
 8003c66:	4601      	mov	r1, r0
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f7ff bfa5 	b.w	8003bb8 <_puts_r>
 8003c6e:	bf00      	nop
 8003c70:	20000018 	.word	0x20000018

08003c74 <__sread>:
 8003c74:	b510      	push	{r4, lr}
 8003c76:	460c      	mov	r4, r1
 8003c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7c:	f000 f8fc 	bl	8003e78 <_read_r>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	bfab      	itete	ge
 8003c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c86:	89a3      	ldrhlt	r3, [r4, #12]
 8003c88:	181b      	addge	r3, r3, r0
 8003c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c8e:	bfac      	ite	ge
 8003c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c92:	81a3      	strhlt	r3, [r4, #12]
 8003c94:	bd10      	pop	{r4, pc}

08003c96 <__swrite>:
 8003c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9a:	461f      	mov	r7, r3
 8003c9c:	898b      	ldrh	r3, [r1, #12]
 8003c9e:	05db      	lsls	r3, r3, #23
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	d505      	bpl.n	8003cb4 <__swrite+0x1e>
 8003ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cac:	2302      	movs	r3, #2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f000 f8d0 	bl	8003e54 <_lseek_r>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cca:	f000 b8e7 	b.w	8003e9c <_write_r>

08003cce <__sseek>:
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd6:	f000 f8bd 	bl	8003e54 <_lseek_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	bf15      	itete	ne
 8003ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003cea:	81a3      	strheq	r3, [r4, #12]
 8003cec:	bf18      	it	ne
 8003cee:	81a3      	strhne	r3, [r4, #12]
 8003cf0:	bd10      	pop	{r4, pc}

08003cf2 <__sclose>:
 8003cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf6:	f000 b89d 	b.w	8003e34 <_close_r>

08003cfa <__swbuf_r>:
 8003cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfc:	460e      	mov	r6, r1
 8003cfe:	4614      	mov	r4, r2
 8003d00:	4605      	mov	r5, r0
 8003d02:	b118      	cbz	r0, 8003d0c <__swbuf_r+0x12>
 8003d04:	6a03      	ldr	r3, [r0, #32]
 8003d06:	b90b      	cbnz	r3, 8003d0c <__swbuf_r+0x12>
 8003d08:	f7ff ff0e 	bl	8003b28 <__sinit>
 8003d0c:	69a3      	ldr	r3, [r4, #24]
 8003d0e:	60a3      	str	r3, [r4, #8]
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	071a      	lsls	r2, r3, #28
 8003d14:	d501      	bpl.n	8003d1a <__swbuf_r+0x20>
 8003d16:	6923      	ldr	r3, [r4, #16]
 8003d18:	b943      	cbnz	r3, 8003d2c <__swbuf_r+0x32>
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f000 f82b 	bl	8003d78 <__swsetup_r>
 8003d22:	b118      	cbz	r0, 8003d2c <__swbuf_r+0x32>
 8003d24:	f04f 37ff 	mov.w	r7, #4294967295
 8003d28:	4638      	mov	r0, r7
 8003d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	6922      	ldr	r2, [r4, #16]
 8003d30:	1a98      	subs	r0, r3, r2
 8003d32:	6963      	ldr	r3, [r4, #20]
 8003d34:	b2f6      	uxtb	r6, r6
 8003d36:	4283      	cmp	r3, r0
 8003d38:	4637      	mov	r7, r6
 8003d3a:	dc05      	bgt.n	8003d48 <__swbuf_r+0x4e>
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 fd38 	bl	80047b4 <_fflush_r>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d1ed      	bne.n	8003d24 <__swbuf_r+0x2a>
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	60a3      	str	r3, [r4, #8]
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	6022      	str	r2, [r4, #0]
 8003d54:	701e      	strb	r6, [r3, #0]
 8003d56:	6962      	ldr	r2, [r4, #20]
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d004      	beq.n	8003d68 <__swbuf_r+0x6e>
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	07db      	lsls	r3, r3, #31
 8003d62:	d5e1      	bpl.n	8003d28 <__swbuf_r+0x2e>
 8003d64:	2e0a      	cmp	r6, #10
 8003d66:	d1df      	bne.n	8003d28 <__swbuf_r+0x2e>
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 fd22 	bl	80047b4 <_fflush_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0d9      	beq.n	8003d28 <__swbuf_r+0x2e>
 8003d74:	e7d6      	b.n	8003d24 <__swbuf_r+0x2a>
	...

08003d78 <__swsetup_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4b29      	ldr	r3, [pc, #164]	@ (8003e20 <__swsetup_r+0xa8>)
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	460c      	mov	r4, r1
 8003d82:	b118      	cbz	r0, 8003d8c <__swsetup_r+0x14>
 8003d84:	6a03      	ldr	r3, [r0, #32]
 8003d86:	b90b      	cbnz	r3, 8003d8c <__swsetup_r+0x14>
 8003d88:	f7ff fece 	bl	8003b28 <__sinit>
 8003d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d90:	0719      	lsls	r1, r3, #28
 8003d92:	d422      	bmi.n	8003dda <__swsetup_r+0x62>
 8003d94:	06da      	lsls	r2, r3, #27
 8003d96:	d407      	bmi.n	8003da8 <__swsetup_r+0x30>
 8003d98:	2209      	movs	r2, #9
 8003d9a:	602a      	str	r2, [r5, #0]
 8003d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da0:	81a3      	strh	r3, [r4, #12]
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	e033      	b.n	8003e10 <__swsetup_r+0x98>
 8003da8:	0758      	lsls	r0, r3, #29
 8003daa:	d512      	bpl.n	8003dd2 <__swsetup_r+0x5a>
 8003dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dae:	b141      	cbz	r1, 8003dc2 <__swsetup_r+0x4a>
 8003db0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003db4:	4299      	cmp	r1, r3
 8003db6:	d002      	beq.n	8003dbe <__swsetup_r+0x46>
 8003db8:	4628      	mov	r0, r5
 8003dba:	f000 f8af 	bl	8003f1c <_free_r>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003dc8:	81a3      	strh	r3, [r4, #12]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6063      	str	r3, [r4, #4]
 8003dce:	6923      	ldr	r3, [r4, #16]
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	89a3      	ldrh	r3, [r4, #12]
 8003dd4:	f043 0308 	orr.w	r3, r3, #8
 8003dd8:	81a3      	strh	r3, [r4, #12]
 8003dda:	6923      	ldr	r3, [r4, #16]
 8003ddc:	b94b      	cbnz	r3, 8003df2 <__swsetup_r+0x7a>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de8:	d003      	beq.n	8003df2 <__swsetup_r+0x7a>
 8003dea:	4621      	mov	r1, r4
 8003dec:	4628      	mov	r0, r5
 8003dee:	f000 fd2f 	bl	8004850 <__smakebuf_r>
 8003df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003df6:	f013 0201 	ands.w	r2, r3, #1
 8003dfa:	d00a      	beq.n	8003e12 <__swsetup_r+0x9a>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60a2      	str	r2, [r4, #8]
 8003e00:	6962      	ldr	r2, [r4, #20]
 8003e02:	4252      	negs	r2, r2
 8003e04:	61a2      	str	r2, [r4, #24]
 8003e06:	6922      	ldr	r2, [r4, #16]
 8003e08:	b942      	cbnz	r2, 8003e1c <__swsetup_r+0xa4>
 8003e0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e0e:	d1c5      	bne.n	8003d9c <__swsetup_r+0x24>
 8003e10:	bd38      	pop	{r3, r4, r5, pc}
 8003e12:	0799      	lsls	r1, r3, #30
 8003e14:	bf58      	it	pl
 8003e16:	6962      	ldrpl	r2, [r4, #20]
 8003e18:	60a2      	str	r2, [r4, #8]
 8003e1a:	e7f4      	b.n	8003e06 <__swsetup_r+0x8e>
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	e7f7      	b.n	8003e10 <__swsetup_r+0x98>
 8003e20:	20000018 	.word	0x20000018

08003e24 <memset>:
 8003e24:	4402      	add	r2, r0
 8003e26:	4603      	mov	r3, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <memset+0xa>
 8003e2c:	4770      	bx	lr
 8003e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e32:	e7f9      	b.n	8003e28 <memset+0x4>

08003e34 <_close_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d06      	ldr	r5, [pc, #24]	@ (8003e50 <_close_r+0x1c>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fc ff7f 	bl	8000d42 <_close>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_close_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_close_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	200002b4 	.word	0x200002b4

08003e54 <_lseek_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4d07      	ldr	r5, [pc, #28]	@ (8003e74 <_lseek_r+0x20>)
 8003e58:	4604      	mov	r4, r0
 8003e5a:	4608      	mov	r0, r1
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	602a      	str	r2, [r5, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f7fc ff94 	bl	8000d90 <_lseek>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d102      	bne.n	8003e72 <_lseek_r+0x1e>
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	b103      	cbz	r3, 8003e72 <_lseek_r+0x1e>
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	bd38      	pop	{r3, r4, r5, pc}
 8003e74:	200002b4 	.word	0x200002b4

08003e78 <_read_r>:
 8003e78:	b538      	push	{r3, r4, r5, lr}
 8003e7a:	4d07      	ldr	r5, [pc, #28]	@ (8003e98 <_read_r+0x20>)
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	4608      	mov	r0, r1
 8003e80:	4611      	mov	r1, r2
 8003e82:	2200      	movs	r2, #0
 8003e84:	602a      	str	r2, [r5, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f7fc ff3e 	bl	8000d08 <_read>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	d102      	bne.n	8003e96 <_read_r+0x1e>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	b103      	cbz	r3, 8003e96 <_read_r+0x1e>
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	200002b4 	.word	0x200002b4

08003e9c <_write_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4d07      	ldr	r5, [pc, #28]	@ (8003ebc <_write_r+0x20>)
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	4608      	mov	r0, r1
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	602a      	str	r2, [r5, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f7fc fc6c 	bl	8000788 <_write>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_write_r+0x1e>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_write_r+0x1e>
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	200002b4 	.word	0x200002b4

08003ec0 <__errno>:
 8003ec0:	4b01      	ldr	r3, [pc, #4]	@ (8003ec8 <__errno+0x8>)
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000018 	.word	0x20000018

08003ecc <__libc_init_array>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	4d0d      	ldr	r5, [pc, #52]	@ (8003f04 <__libc_init_array+0x38>)
 8003ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8003f08 <__libc_init_array+0x3c>)
 8003ed2:	1b64      	subs	r4, r4, r5
 8003ed4:	10a4      	asrs	r4, r4, #2
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	42a6      	cmp	r6, r4
 8003eda:	d109      	bne.n	8003ef0 <__libc_init_array+0x24>
 8003edc:	4d0b      	ldr	r5, [pc, #44]	@ (8003f0c <__libc_init_array+0x40>)
 8003ede:	4c0c      	ldr	r4, [pc, #48]	@ (8003f10 <__libc_init_array+0x44>)
 8003ee0:	f000 fd24 	bl	800492c <_init>
 8003ee4:	1b64      	subs	r4, r4, r5
 8003ee6:	10a4      	asrs	r4, r4, #2
 8003ee8:	2600      	movs	r6, #0
 8003eea:	42a6      	cmp	r6, r4
 8003eec:	d105      	bne.n	8003efa <__libc_init_array+0x2e>
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef4:	4798      	blx	r3
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	e7ee      	b.n	8003ed8 <__libc_init_array+0xc>
 8003efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efe:	4798      	blx	r3
 8003f00:	3601      	adds	r6, #1
 8003f02:	e7f2      	b.n	8003eea <__libc_init_array+0x1e>
 8003f04:	08004a54 	.word	0x08004a54
 8003f08:	08004a54 	.word	0x08004a54
 8003f0c:	08004a54 	.word	0x08004a54
 8003f10:	08004a58 	.word	0x08004a58

08003f14 <__retarget_lock_init_recursive>:
 8003f14:	4770      	bx	lr

08003f16 <__retarget_lock_acquire_recursive>:
 8003f16:	4770      	bx	lr

08003f18 <__retarget_lock_release_recursive>:
 8003f18:	4770      	bx	lr
	...

08003f1c <_free_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4605      	mov	r5, r0
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d041      	beq.n	8003fa8 <_free_r+0x8c>
 8003f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f28:	1f0c      	subs	r4, r1, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bfb8      	it	lt
 8003f2e:	18e4      	addlt	r4, r4, r3
 8003f30:	f000 f8e0 	bl	80040f4 <__malloc_lock>
 8003f34:	4a1d      	ldr	r2, [pc, #116]	@ (8003fac <_free_r+0x90>)
 8003f36:	6813      	ldr	r3, [r2, #0]
 8003f38:	b933      	cbnz	r3, 8003f48 <_free_r+0x2c>
 8003f3a:	6063      	str	r3, [r4, #4]
 8003f3c:	6014      	str	r4, [r2, #0]
 8003f3e:	4628      	mov	r0, r5
 8003f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f44:	f000 b8dc 	b.w	8004100 <__malloc_unlock>
 8003f48:	42a3      	cmp	r3, r4
 8003f4a:	d908      	bls.n	8003f5e <_free_r+0x42>
 8003f4c:	6820      	ldr	r0, [r4, #0]
 8003f4e:	1821      	adds	r1, r4, r0
 8003f50:	428b      	cmp	r3, r1
 8003f52:	bf01      	itttt	eq
 8003f54:	6819      	ldreq	r1, [r3, #0]
 8003f56:	685b      	ldreq	r3, [r3, #4]
 8003f58:	1809      	addeq	r1, r1, r0
 8003f5a:	6021      	streq	r1, [r4, #0]
 8003f5c:	e7ed      	b.n	8003f3a <_free_r+0x1e>
 8003f5e:	461a      	mov	r2, r3
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b10b      	cbz	r3, 8003f68 <_free_r+0x4c>
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	d9fa      	bls.n	8003f5e <_free_r+0x42>
 8003f68:	6811      	ldr	r1, [r2, #0]
 8003f6a:	1850      	adds	r0, r2, r1
 8003f6c:	42a0      	cmp	r0, r4
 8003f6e:	d10b      	bne.n	8003f88 <_free_r+0x6c>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	4401      	add	r1, r0
 8003f74:	1850      	adds	r0, r2, r1
 8003f76:	4283      	cmp	r3, r0
 8003f78:	6011      	str	r1, [r2, #0]
 8003f7a:	d1e0      	bne.n	8003f3e <_free_r+0x22>
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	6053      	str	r3, [r2, #4]
 8003f82:	4408      	add	r0, r1
 8003f84:	6010      	str	r0, [r2, #0]
 8003f86:	e7da      	b.n	8003f3e <_free_r+0x22>
 8003f88:	d902      	bls.n	8003f90 <_free_r+0x74>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	602b      	str	r3, [r5, #0]
 8003f8e:	e7d6      	b.n	8003f3e <_free_r+0x22>
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	1821      	adds	r1, r4, r0
 8003f94:	428b      	cmp	r3, r1
 8003f96:	bf04      	itt	eq
 8003f98:	6819      	ldreq	r1, [r3, #0]
 8003f9a:	685b      	ldreq	r3, [r3, #4]
 8003f9c:	6063      	str	r3, [r4, #4]
 8003f9e:	bf04      	itt	eq
 8003fa0:	1809      	addeq	r1, r1, r0
 8003fa2:	6021      	streq	r1, [r4, #0]
 8003fa4:	6054      	str	r4, [r2, #4]
 8003fa6:	e7ca      	b.n	8003f3e <_free_r+0x22>
 8003fa8:	bd38      	pop	{r3, r4, r5, pc}
 8003faa:	bf00      	nop
 8003fac:	200002c0 	.word	0x200002c0

08003fb0 <sbrk_aligned>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8003ff0 <sbrk_aligned+0x40>)
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	6831      	ldr	r1, [r6, #0]
 8003fb8:	4605      	mov	r5, r0
 8003fba:	b911      	cbnz	r1, 8003fc2 <sbrk_aligned+0x12>
 8003fbc:	f000 fca6 	bl	800490c <_sbrk_r>
 8003fc0:	6030      	str	r0, [r6, #0]
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f000 fca1 	bl	800490c <_sbrk_r>
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	d103      	bne.n	8003fd6 <sbrk_aligned+0x26>
 8003fce:	f04f 34ff 	mov.w	r4, #4294967295
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	bd70      	pop	{r4, r5, r6, pc}
 8003fd6:	1cc4      	adds	r4, r0, #3
 8003fd8:	f024 0403 	bic.w	r4, r4, #3
 8003fdc:	42a0      	cmp	r0, r4
 8003fde:	d0f8      	beq.n	8003fd2 <sbrk_aligned+0x22>
 8003fe0:	1a21      	subs	r1, r4, r0
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f000 fc92 	bl	800490c <_sbrk_r>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d1f2      	bne.n	8003fd2 <sbrk_aligned+0x22>
 8003fec:	e7ef      	b.n	8003fce <sbrk_aligned+0x1e>
 8003fee:	bf00      	nop
 8003ff0:	200002bc 	.word	0x200002bc

08003ff4 <_malloc_r>:
 8003ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ff8:	1ccd      	adds	r5, r1, #3
 8003ffa:	f025 0503 	bic.w	r5, r5, #3
 8003ffe:	3508      	adds	r5, #8
 8004000:	2d0c      	cmp	r5, #12
 8004002:	bf38      	it	cc
 8004004:	250c      	movcc	r5, #12
 8004006:	2d00      	cmp	r5, #0
 8004008:	4606      	mov	r6, r0
 800400a:	db01      	blt.n	8004010 <_malloc_r+0x1c>
 800400c:	42a9      	cmp	r1, r5
 800400e:	d904      	bls.n	800401a <_malloc_r+0x26>
 8004010:	230c      	movs	r3, #12
 8004012:	6033      	str	r3, [r6, #0]
 8004014:	2000      	movs	r0, #0
 8004016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800401a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040f0 <_malloc_r+0xfc>
 800401e:	f000 f869 	bl	80040f4 <__malloc_lock>
 8004022:	f8d8 3000 	ldr.w	r3, [r8]
 8004026:	461c      	mov	r4, r3
 8004028:	bb44      	cbnz	r4, 800407c <_malloc_r+0x88>
 800402a:	4629      	mov	r1, r5
 800402c:	4630      	mov	r0, r6
 800402e:	f7ff ffbf 	bl	8003fb0 <sbrk_aligned>
 8004032:	1c43      	adds	r3, r0, #1
 8004034:	4604      	mov	r4, r0
 8004036:	d158      	bne.n	80040ea <_malloc_r+0xf6>
 8004038:	f8d8 4000 	ldr.w	r4, [r8]
 800403c:	4627      	mov	r7, r4
 800403e:	2f00      	cmp	r7, #0
 8004040:	d143      	bne.n	80040ca <_malloc_r+0xd6>
 8004042:	2c00      	cmp	r4, #0
 8004044:	d04b      	beq.n	80040de <_malloc_r+0xea>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	4639      	mov	r1, r7
 800404a:	4630      	mov	r0, r6
 800404c:	eb04 0903 	add.w	r9, r4, r3
 8004050:	f000 fc5c 	bl	800490c <_sbrk_r>
 8004054:	4581      	cmp	r9, r0
 8004056:	d142      	bne.n	80040de <_malloc_r+0xea>
 8004058:	6821      	ldr	r1, [r4, #0]
 800405a:	1a6d      	subs	r5, r5, r1
 800405c:	4629      	mov	r1, r5
 800405e:	4630      	mov	r0, r6
 8004060:	f7ff ffa6 	bl	8003fb0 <sbrk_aligned>
 8004064:	3001      	adds	r0, #1
 8004066:	d03a      	beq.n	80040de <_malloc_r+0xea>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	442b      	add	r3, r5
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	f8d8 3000 	ldr.w	r3, [r8]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	bb62      	cbnz	r2, 80040d0 <_malloc_r+0xdc>
 8004076:	f8c8 7000 	str.w	r7, [r8]
 800407a:	e00f      	b.n	800409c <_malloc_r+0xa8>
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	1b52      	subs	r2, r2, r5
 8004080:	d420      	bmi.n	80040c4 <_malloc_r+0xd0>
 8004082:	2a0b      	cmp	r2, #11
 8004084:	d917      	bls.n	80040b6 <_malloc_r+0xc2>
 8004086:	1961      	adds	r1, r4, r5
 8004088:	42a3      	cmp	r3, r4
 800408a:	6025      	str	r5, [r4, #0]
 800408c:	bf18      	it	ne
 800408e:	6059      	strne	r1, [r3, #4]
 8004090:	6863      	ldr	r3, [r4, #4]
 8004092:	bf08      	it	eq
 8004094:	f8c8 1000 	streq.w	r1, [r8]
 8004098:	5162      	str	r2, [r4, r5]
 800409a:	604b      	str	r3, [r1, #4]
 800409c:	4630      	mov	r0, r6
 800409e:	f000 f82f 	bl	8004100 <__malloc_unlock>
 80040a2:	f104 000b 	add.w	r0, r4, #11
 80040a6:	1d23      	adds	r3, r4, #4
 80040a8:	f020 0007 	bic.w	r0, r0, #7
 80040ac:	1ac2      	subs	r2, r0, r3
 80040ae:	bf1c      	itt	ne
 80040b0:	1a1b      	subne	r3, r3, r0
 80040b2:	50a3      	strne	r3, [r4, r2]
 80040b4:	e7af      	b.n	8004016 <_malloc_r+0x22>
 80040b6:	6862      	ldr	r2, [r4, #4]
 80040b8:	42a3      	cmp	r3, r4
 80040ba:	bf0c      	ite	eq
 80040bc:	f8c8 2000 	streq.w	r2, [r8]
 80040c0:	605a      	strne	r2, [r3, #4]
 80040c2:	e7eb      	b.n	800409c <_malloc_r+0xa8>
 80040c4:	4623      	mov	r3, r4
 80040c6:	6864      	ldr	r4, [r4, #4]
 80040c8:	e7ae      	b.n	8004028 <_malloc_r+0x34>
 80040ca:	463c      	mov	r4, r7
 80040cc:	687f      	ldr	r7, [r7, #4]
 80040ce:	e7b6      	b.n	800403e <_malloc_r+0x4a>
 80040d0:	461a      	mov	r2, r3
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	42a3      	cmp	r3, r4
 80040d6:	d1fb      	bne.n	80040d0 <_malloc_r+0xdc>
 80040d8:	2300      	movs	r3, #0
 80040da:	6053      	str	r3, [r2, #4]
 80040dc:	e7de      	b.n	800409c <_malloc_r+0xa8>
 80040de:	230c      	movs	r3, #12
 80040e0:	6033      	str	r3, [r6, #0]
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 f80c 	bl	8004100 <__malloc_unlock>
 80040e8:	e794      	b.n	8004014 <_malloc_r+0x20>
 80040ea:	6005      	str	r5, [r0, #0]
 80040ec:	e7d6      	b.n	800409c <_malloc_r+0xa8>
 80040ee:	bf00      	nop
 80040f0:	200002c0 	.word	0x200002c0

080040f4 <__malloc_lock>:
 80040f4:	4801      	ldr	r0, [pc, #4]	@ (80040fc <__malloc_lock+0x8>)
 80040f6:	f7ff bf0e 	b.w	8003f16 <__retarget_lock_acquire_recursive>
 80040fa:	bf00      	nop
 80040fc:	200002b8 	.word	0x200002b8

08004100 <__malloc_unlock>:
 8004100:	4801      	ldr	r0, [pc, #4]	@ (8004108 <__malloc_unlock+0x8>)
 8004102:	f7ff bf09 	b.w	8003f18 <__retarget_lock_release_recursive>
 8004106:	bf00      	nop
 8004108:	200002b8 	.word	0x200002b8

0800410c <__sfputc_r>:
 800410c:	6893      	ldr	r3, [r2, #8]
 800410e:	3b01      	subs	r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	b410      	push	{r4}
 8004114:	6093      	str	r3, [r2, #8]
 8004116:	da08      	bge.n	800412a <__sfputc_r+0x1e>
 8004118:	6994      	ldr	r4, [r2, #24]
 800411a:	42a3      	cmp	r3, r4
 800411c:	db01      	blt.n	8004122 <__sfputc_r+0x16>
 800411e:	290a      	cmp	r1, #10
 8004120:	d103      	bne.n	800412a <__sfputc_r+0x1e>
 8004122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004126:	f7ff bde8 	b.w	8003cfa <__swbuf_r>
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	1c58      	adds	r0, r3, #1
 800412e:	6010      	str	r0, [r2, #0]
 8004130:	7019      	strb	r1, [r3, #0]
 8004132:	4608      	mov	r0, r1
 8004134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004138:	4770      	bx	lr

0800413a <__sfputs_r>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	4606      	mov	r6, r0
 800413e:	460f      	mov	r7, r1
 8004140:	4614      	mov	r4, r2
 8004142:	18d5      	adds	r5, r2, r3
 8004144:	42ac      	cmp	r4, r5
 8004146:	d101      	bne.n	800414c <__sfputs_r+0x12>
 8004148:	2000      	movs	r0, #0
 800414a:	e007      	b.n	800415c <__sfputs_r+0x22>
 800414c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004150:	463a      	mov	r2, r7
 8004152:	4630      	mov	r0, r6
 8004154:	f7ff ffda 	bl	800410c <__sfputc_r>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d1f3      	bne.n	8004144 <__sfputs_r+0xa>
 800415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004160 <_vfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	460d      	mov	r5, r1
 8004166:	b09d      	sub	sp, #116	@ 0x74
 8004168:	4614      	mov	r4, r2
 800416a:	4698      	mov	r8, r3
 800416c:	4606      	mov	r6, r0
 800416e:	b118      	cbz	r0, 8004178 <_vfiprintf_r+0x18>
 8004170:	6a03      	ldr	r3, [r0, #32]
 8004172:	b90b      	cbnz	r3, 8004178 <_vfiprintf_r+0x18>
 8004174:	f7ff fcd8 	bl	8003b28 <__sinit>
 8004178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800417a:	07d9      	lsls	r1, r3, #31
 800417c:	d405      	bmi.n	800418a <_vfiprintf_r+0x2a>
 800417e:	89ab      	ldrh	r3, [r5, #12]
 8004180:	059a      	lsls	r2, r3, #22
 8004182:	d402      	bmi.n	800418a <_vfiprintf_r+0x2a>
 8004184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004186:	f7ff fec6 	bl	8003f16 <__retarget_lock_acquire_recursive>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	d501      	bpl.n	8004194 <_vfiprintf_r+0x34>
 8004190:	692b      	ldr	r3, [r5, #16]
 8004192:	b99b      	cbnz	r3, 80041bc <_vfiprintf_r+0x5c>
 8004194:	4629      	mov	r1, r5
 8004196:	4630      	mov	r0, r6
 8004198:	f7ff fdee 	bl	8003d78 <__swsetup_r>
 800419c:	b170      	cbz	r0, 80041bc <_vfiprintf_r+0x5c>
 800419e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041a0:	07dc      	lsls	r4, r3, #31
 80041a2:	d504      	bpl.n	80041ae <_vfiprintf_r+0x4e>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	b01d      	add	sp, #116	@ 0x74
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	0598      	lsls	r0, r3, #22
 80041b2:	d4f7      	bmi.n	80041a4 <_vfiprintf_r+0x44>
 80041b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041b6:	f7ff feaf 	bl	8003f18 <__retarget_lock_release_recursive>
 80041ba:	e7f3      	b.n	80041a4 <_vfiprintf_r+0x44>
 80041bc:	2300      	movs	r3, #0
 80041be:	9309      	str	r3, [sp, #36]	@ 0x24
 80041c0:	2320      	movs	r3, #32
 80041c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ca:	2330      	movs	r3, #48	@ 0x30
 80041cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800437c <_vfiprintf_r+0x21c>
 80041d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041d4:	f04f 0901 	mov.w	r9, #1
 80041d8:	4623      	mov	r3, r4
 80041da:	469a      	mov	sl, r3
 80041dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041e0:	b10a      	cbz	r2, 80041e6 <_vfiprintf_r+0x86>
 80041e2:	2a25      	cmp	r2, #37	@ 0x25
 80041e4:	d1f9      	bne.n	80041da <_vfiprintf_r+0x7a>
 80041e6:	ebba 0b04 	subs.w	fp, sl, r4
 80041ea:	d00b      	beq.n	8004204 <_vfiprintf_r+0xa4>
 80041ec:	465b      	mov	r3, fp
 80041ee:	4622      	mov	r2, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	4630      	mov	r0, r6
 80041f4:	f7ff ffa1 	bl	800413a <__sfputs_r>
 80041f8:	3001      	adds	r0, #1
 80041fa:	f000 80a7 	beq.w	800434c <_vfiprintf_r+0x1ec>
 80041fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004200:	445a      	add	r2, fp
 8004202:	9209      	str	r2, [sp, #36]	@ 0x24
 8004204:	f89a 3000 	ldrb.w	r3, [sl]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 809f 	beq.w	800434c <_vfiprintf_r+0x1ec>
 800420e:	2300      	movs	r3, #0
 8004210:	f04f 32ff 	mov.w	r2, #4294967295
 8004214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004218:	f10a 0a01 	add.w	sl, sl, #1
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	9307      	str	r3, [sp, #28]
 8004220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004224:	931a      	str	r3, [sp, #104]	@ 0x68
 8004226:	4654      	mov	r4, sl
 8004228:	2205      	movs	r2, #5
 800422a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800422e:	4853      	ldr	r0, [pc, #332]	@ (800437c <_vfiprintf_r+0x21c>)
 8004230:	f7fb ffee 	bl	8000210 <memchr>
 8004234:	9a04      	ldr	r2, [sp, #16]
 8004236:	b9d8      	cbnz	r0, 8004270 <_vfiprintf_r+0x110>
 8004238:	06d1      	lsls	r1, r2, #27
 800423a:	bf44      	itt	mi
 800423c:	2320      	movmi	r3, #32
 800423e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004242:	0713      	lsls	r3, r2, #28
 8004244:	bf44      	itt	mi
 8004246:	232b      	movmi	r3, #43	@ 0x2b
 8004248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800424c:	f89a 3000 	ldrb.w	r3, [sl]
 8004250:	2b2a      	cmp	r3, #42	@ 0x2a
 8004252:	d015      	beq.n	8004280 <_vfiprintf_r+0x120>
 8004254:	9a07      	ldr	r2, [sp, #28]
 8004256:	4654      	mov	r4, sl
 8004258:	2000      	movs	r0, #0
 800425a:	f04f 0c0a 	mov.w	ip, #10
 800425e:	4621      	mov	r1, r4
 8004260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004264:	3b30      	subs	r3, #48	@ 0x30
 8004266:	2b09      	cmp	r3, #9
 8004268:	d94b      	bls.n	8004302 <_vfiprintf_r+0x1a2>
 800426a:	b1b0      	cbz	r0, 800429a <_vfiprintf_r+0x13a>
 800426c:	9207      	str	r2, [sp, #28]
 800426e:	e014      	b.n	800429a <_vfiprintf_r+0x13a>
 8004270:	eba0 0308 	sub.w	r3, r0, r8
 8004274:	fa09 f303 	lsl.w	r3, r9, r3
 8004278:	4313      	orrs	r3, r2
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	46a2      	mov	sl, r4
 800427e:	e7d2      	b.n	8004226 <_vfiprintf_r+0xc6>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	1d19      	adds	r1, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	9103      	str	r1, [sp, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	bfbb      	ittet	lt
 800428c:	425b      	neglt	r3, r3
 800428e:	f042 0202 	orrlt.w	r2, r2, #2
 8004292:	9307      	strge	r3, [sp, #28]
 8004294:	9307      	strlt	r3, [sp, #28]
 8004296:	bfb8      	it	lt
 8004298:	9204      	strlt	r2, [sp, #16]
 800429a:	7823      	ldrb	r3, [r4, #0]
 800429c:	2b2e      	cmp	r3, #46	@ 0x2e
 800429e:	d10a      	bne.n	80042b6 <_vfiprintf_r+0x156>
 80042a0:	7863      	ldrb	r3, [r4, #1]
 80042a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a4:	d132      	bne.n	800430c <_vfiprintf_r+0x1ac>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	1d1a      	adds	r2, r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	9203      	str	r2, [sp, #12]
 80042ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042b2:	3402      	adds	r4, #2
 80042b4:	9305      	str	r3, [sp, #20]
 80042b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800438c <_vfiprintf_r+0x22c>
 80042ba:	7821      	ldrb	r1, [r4, #0]
 80042bc:	2203      	movs	r2, #3
 80042be:	4650      	mov	r0, sl
 80042c0:	f7fb ffa6 	bl	8000210 <memchr>
 80042c4:	b138      	cbz	r0, 80042d6 <_vfiprintf_r+0x176>
 80042c6:	9b04      	ldr	r3, [sp, #16]
 80042c8:	eba0 000a 	sub.w	r0, r0, sl
 80042cc:	2240      	movs	r2, #64	@ 0x40
 80042ce:	4082      	lsls	r2, r0
 80042d0:	4313      	orrs	r3, r2
 80042d2:	3401      	adds	r4, #1
 80042d4:	9304      	str	r3, [sp, #16]
 80042d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042da:	4829      	ldr	r0, [pc, #164]	@ (8004380 <_vfiprintf_r+0x220>)
 80042dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042e0:	2206      	movs	r2, #6
 80042e2:	f7fb ff95 	bl	8000210 <memchr>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d03f      	beq.n	800436a <_vfiprintf_r+0x20a>
 80042ea:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <_vfiprintf_r+0x224>)
 80042ec:	bb1b      	cbnz	r3, 8004336 <_vfiprintf_r+0x1d6>
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	3307      	adds	r3, #7
 80042f2:	f023 0307 	bic.w	r3, r3, #7
 80042f6:	3308      	adds	r3, #8
 80042f8:	9303      	str	r3, [sp, #12]
 80042fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042fc:	443b      	add	r3, r7
 80042fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004300:	e76a      	b.n	80041d8 <_vfiprintf_r+0x78>
 8004302:	fb0c 3202 	mla	r2, ip, r2, r3
 8004306:	460c      	mov	r4, r1
 8004308:	2001      	movs	r0, #1
 800430a:	e7a8      	b.n	800425e <_vfiprintf_r+0xfe>
 800430c:	2300      	movs	r3, #0
 800430e:	3401      	adds	r4, #1
 8004310:	9305      	str	r3, [sp, #20]
 8004312:	4619      	mov	r1, r3
 8004314:	f04f 0c0a 	mov.w	ip, #10
 8004318:	4620      	mov	r0, r4
 800431a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800431e:	3a30      	subs	r2, #48	@ 0x30
 8004320:	2a09      	cmp	r2, #9
 8004322:	d903      	bls.n	800432c <_vfiprintf_r+0x1cc>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0c6      	beq.n	80042b6 <_vfiprintf_r+0x156>
 8004328:	9105      	str	r1, [sp, #20]
 800432a:	e7c4      	b.n	80042b6 <_vfiprintf_r+0x156>
 800432c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004330:	4604      	mov	r4, r0
 8004332:	2301      	movs	r3, #1
 8004334:	e7f0      	b.n	8004318 <_vfiprintf_r+0x1b8>
 8004336:	ab03      	add	r3, sp, #12
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	462a      	mov	r2, r5
 800433c:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <_vfiprintf_r+0x228>)
 800433e:	a904      	add	r1, sp, #16
 8004340:	4630      	mov	r0, r6
 8004342:	f3af 8000 	nop.w
 8004346:	4607      	mov	r7, r0
 8004348:	1c78      	adds	r0, r7, #1
 800434a:	d1d6      	bne.n	80042fa <_vfiprintf_r+0x19a>
 800434c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800434e:	07d9      	lsls	r1, r3, #31
 8004350:	d405      	bmi.n	800435e <_vfiprintf_r+0x1fe>
 8004352:	89ab      	ldrh	r3, [r5, #12]
 8004354:	059a      	lsls	r2, r3, #22
 8004356:	d402      	bmi.n	800435e <_vfiprintf_r+0x1fe>
 8004358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800435a:	f7ff fddd 	bl	8003f18 <__retarget_lock_release_recursive>
 800435e:	89ab      	ldrh	r3, [r5, #12]
 8004360:	065b      	lsls	r3, r3, #25
 8004362:	f53f af1f 	bmi.w	80041a4 <_vfiprintf_r+0x44>
 8004366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004368:	e71e      	b.n	80041a8 <_vfiprintf_r+0x48>
 800436a:	ab03      	add	r3, sp, #12
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	462a      	mov	r2, r5
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <_vfiprintf_r+0x228>)
 8004372:	a904      	add	r1, sp, #16
 8004374:	4630      	mov	r0, r6
 8004376:	f000 f879 	bl	800446c <_printf_i>
 800437a:	e7e4      	b.n	8004346 <_vfiprintf_r+0x1e6>
 800437c:	08004a18 	.word	0x08004a18
 8004380:	08004a22 	.word	0x08004a22
 8004384:	00000000 	.word	0x00000000
 8004388:	0800413b 	.word	0x0800413b
 800438c:	08004a1e 	.word	0x08004a1e

08004390 <_printf_common>:
 8004390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004394:	4616      	mov	r6, r2
 8004396:	4698      	mov	r8, r3
 8004398:	688a      	ldr	r2, [r1, #8]
 800439a:	690b      	ldr	r3, [r1, #16]
 800439c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043a0:	4293      	cmp	r3, r2
 80043a2:	bfb8      	it	lt
 80043a4:	4613      	movlt	r3, r2
 80043a6:	6033      	str	r3, [r6, #0]
 80043a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043ac:	4607      	mov	r7, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	b10a      	cbz	r2, 80043b6 <_printf_common+0x26>
 80043b2:	3301      	adds	r3, #1
 80043b4:	6033      	str	r3, [r6, #0]
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	0699      	lsls	r1, r3, #26
 80043ba:	bf42      	ittt	mi
 80043bc:	6833      	ldrmi	r3, [r6, #0]
 80043be:	3302      	addmi	r3, #2
 80043c0:	6033      	strmi	r3, [r6, #0]
 80043c2:	6825      	ldr	r5, [r4, #0]
 80043c4:	f015 0506 	ands.w	r5, r5, #6
 80043c8:	d106      	bne.n	80043d8 <_printf_common+0x48>
 80043ca:	f104 0a19 	add.w	sl, r4, #25
 80043ce:	68e3      	ldr	r3, [r4, #12]
 80043d0:	6832      	ldr	r2, [r6, #0]
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	42ab      	cmp	r3, r5
 80043d6:	dc26      	bgt.n	8004426 <_printf_common+0x96>
 80043d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043dc:	6822      	ldr	r2, [r4, #0]
 80043de:	3b00      	subs	r3, #0
 80043e0:	bf18      	it	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	0692      	lsls	r2, r2, #26
 80043e6:	d42b      	bmi.n	8004440 <_printf_common+0xb0>
 80043e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043ec:	4641      	mov	r1, r8
 80043ee:	4638      	mov	r0, r7
 80043f0:	47c8      	blx	r9
 80043f2:	3001      	adds	r0, #1
 80043f4:	d01e      	beq.n	8004434 <_printf_common+0xa4>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	6922      	ldr	r2, [r4, #16]
 80043fa:	f003 0306 	and.w	r3, r3, #6
 80043fe:	2b04      	cmp	r3, #4
 8004400:	bf02      	ittt	eq
 8004402:	68e5      	ldreq	r5, [r4, #12]
 8004404:	6833      	ldreq	r3, [r6, #0]
 8004406:	1aed      	subeq	r5, r5, r3
 8004408:	68a3      	ldr	r3, [r4, #8]
 800440a:	bf0c      	ite	eq
 800440c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004410:	2500      	movne	r5, #0
 8004412:	4293      	cmp	r3, r2
 8004414:	bfc4      	itt	gt
 8004416:	1a9b      	subgt	r3, r3, r2
 8004418:	18ed      	addgt	r5, r5, r3
 800441a:	2600      	movs	r6, #0
 800441c:	341a      	adds	r4, #26
 800441e:	42b5      	cmp	r5, r6
 8004420:	d11a      	bne.n	8004458 <_printf_common+0xc8>
 8004422:	2000      	movs	r0, #0
 8004424:	e008      	b.n	8004438 <_printf_common+0xa8>
 8004426:	2301      	movs	r3, #1
 8004428:	4652      	mov	r2, sl
 800442a:	4641      	mov	r1, r8
 800442c:	4638      	mov	r0, r7
 800442e:	47c8      	blx	r9
 8004430:	3001      	adds	r0, #1
 8004432:	d103      	bne.n	800443c <_printf_common+0xac>
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443c:	3501      	adds	r5, #1
 800443e:	e7c6      	b.n	80043ce <_printf_common+0x3e>
 8004440:	18e1      	adds	r1, r4, r3
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	2030      	movs	r0, #48	@ 0x30
 8004446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800444a:	4422      	add	r2, r4
 800444c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004454:	3302      	adds	r3, #2
 8004456:	e7c7      	b.n	80043e8 <_printf_common+0x58>
 8004458:	2301      	movs	r3, #1
 800445a:	4622      	mov	r2, r4
 800445c:	4641      	mov	r1, r8
 800445e:	4638      	mov	r0, r7
 8004460:	47c8      	blx	r9
 8004462:	3001      	adds	r0, #1
 8004464:	d0e6      	beq.n	8004434 <_printf_common+0xa4>
 8004466:	3601      	adds	r6, #1
 8004468:	e7d9      	b.n	800441e <_printf_common+0x8e>
	...

0800446c <_printf_i>:
 800446c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004470:	7e0f      	ldrb	r7, [r1, #24]
 8004472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004474:	2f78      	cmp	r7, #120	@ 0x78
 8004476:	4691      	mov	r9, r2
 8004478:	4680      	mov	r8, r0
 800447a:	460c      	mov	r4, r1
 800447c:	469a      	mov	sl, r3
 800447e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004482:	d807      	bhi.n	8004494 <_printf_i+0x28>
 8004484:	2f62      	cmp	r7, #98	@ 0x62
 8004486:	d80a      	bhi.n	800449e <_printf_i+0x32>
 8004488:	2f00      	cmp	r7, #0
 800448a:	f000 80d2 	beq.w	8004632 <_printf_i+0x1c6>
 800448e:	2f58      	cmp	r7, #88	@ 0x58
 8004490:	f000 80b9 	beq.w	8004606 <_printf_i+0x19a>
 8004494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800449c:	e03a      	b.n	8004514 <_printf_i+0xa8>
 800449e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044a2:	2b15      	cmp	r3, #21
 80044a4:	d8f6      	bhi.n	8004494 <_printf_i+0x28>
 80044a6:	a101      	add	r1, pc, #4	@ (adr r1, 80044ac <_printf_i+0x40>)
 80044a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044ac:	08004505 	.word	0x08004505
 80044b0:	08004519 	.word	0x08004519
 80044b4:	08004495 	.word	0x08004495
 80044b8:	08004495 	.word	0x08004495
 80044bc:	08004495 	.word	0x08004495
 80044c0:	08004495 	.word	0x08004495
 80044c4:	08004519 	.word	0x08004519
 80044c8:	08004495 	.word	0x08004495
 80044cc:	08004495 	.word	0x08004495
 80044d0:	08004495 	.word	0x08004495
 80044d4:	08004495 	.word	0x08004495
 80044d8:	08004619 	.word	0x08004619
 80044dc:	08004543 	.word	0x08004543
 80044e0:	080045d3 	.word	0x080045d3
 80044e4:	08004495 	.word	0x08004495
 80044e8:	08004495 	.word	0x08004495
 80044ec:	0800463b 	.word	0x0800463b
 80044f0:	08004495 	.word	0x08004495
 80044f4:	08004543 	.word	0x08004543
 80044f8:	08004495 	.word	0x08004495
 80044fc:	08004495 	.word	0x08004495
 8004500:	080045db 	.word	0x080045db
 8004504:	6833      	ldr	r3, [r6, #0]
 8004506:	1d1a      	adds	r2, r3, #4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6032      	str	r2, [r6, #0]
 800450c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004514:	2301      	movs	r3, #1
 8004516:	e09d      	b.n	8004654 <_printf_i+0x1e8>
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	6820      	ldr	r0, [r4, #0]
 800451c:	1d19      	adds	r1, r3, #4
 800451e:	6031      	str	r1, [r6, #0]
 8004520:	0606      	lsls	r6, r0, #24
 8004522:	d501      	bpl.n	8004528 <_printf_i+0xbc>
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	e003      	b.n	8004530 <_printf_i+0xc4>
 8004528:	0645      	lsls	r5, r0, #25
 800452a:	d5fb      	bpl.n	8004524 <_printf_i+0xb8>
 800452c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004530:	2d00      	cmp	r5, #0
 8004532:	da03      	bge.n	800453c <_printf_i+0xd0>
 8004534:	232d      	movs	r3, #45	@ 0x2d
 8004536:	426d      	negs	r5, r5
 8004538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800453c:	4859      	ldr	r0, [pc, #356]	@ (80046a4 <_printf_i+0x238>)
 800453e:	230a      	movs	r3, #10
 8004540:	e011      	b.n	8004566 <_printf_i+0xfa>
 8004542:	6821      	ldr	r1, [r4, #0]
 8004544:	6833      	ldr	r3, [r6, #0]
 8004546:	0608      	lsls	r0, r1, #24
 8004548:	f853 5b04 	ldr.w	r5, [r3], #4
 800454c:	d402      	bmi.n	8004554 <_printf_i+0xe8>
 800454e:	0649      	lsls	r1, r1, #25
 8004550:	bf48      	it	mi
 8004552:	b2ad      	uxthmi	r5, r5
 8004554:	2f6f      	cmp	r7, #111	@ 0x6f
 8004556:	4853      	ldr	r0, [pc, #332]	@ (80046a4 <_printf_i+0x238>)
 8004558:	6033      	str	r3, [r6, #0]
 800455a:	bf14      	ite	ne
 800455c:	230a      	movne	r3, #10
 800455e:	2308      	moveq	r3, #8
 8004560:	2100      	movs	r1, #0
 8004562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004566:	6866      	ldr	r6, [r4, #4]
 8004568:	60a6      	str	r6, [r4, #8]
 800456a:	2e00      	cmp	r6, #0
 800456c:	bfa2      	ittt	ge
 800456e:	6821      	ldrge	r1, [r4, #0]
 8004570:	f021 0104 	bicge.w	r1, r1, #4
 8004574:	6021      	strge	r1, [r4, #0]
 8004576:	b90d      	cbnz	r5, 800457c <_printf_i+0x110>
 8004578:	2e00      	cmp	r6, #0
 800457a:	d04b      	beq.n	8004614 <_printf_i+0x1a8>
 800457c:	4616      	mov	r6, r2
 800457e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004582:	fb03 5711 	mls	r7, r3, r1, r5
 8004586:	5dc7      	ldrb	r7, [r0, r7]
 8004588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800458c:	462f      	mov	r7, r5
 800458e:	42bb      	cmp	r3, r7
 8004590:	460d      	mov	r5, r1
 8004592:	d9f4      	bls.n	800457e <_printf_i+0x112>
 8004594:	2b08      	cmp	r3, #8
 8004596:	d10b      	bne.n	80045b0 <_printf_i+0x144>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	07df      	lsls	r7, r3, #31
 800459c:	d508      	bpl.n	80045b0 <_printf_i+0x144>
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	6861      	ldr	r1, [r4, #4]
 80045a2:	4299      	cmp	r1, r3
 80045a4:	bfde      	ittt	le
 80045a6:	2330      	movle	r3, #48	@ 0x30
 80045a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045b0:	1b92      	subs	r2, r2, r6
 80045b2:	6122      	str	r2, [r4, #16]
 80045b4:	f8cd a000 	str.w	sl, [sp]
 80045b8:	464b      	mov	r3, r9
 80045ba:	aa03      	add	r2, sp, #12
 80045bc:	4621      	mov	r1, r4
 80045be:	4640      	mov	r0, r8
 80045c0:	f7ff fee6 	bl	8004390 <_printf_common>
 80045c4:	3001      	adds	r0, #1
 80045c6:	d14a      	bne.n	800465e <_printf_i+0x1f2>
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	b004      	add	sp, #16
 80045ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	f043 0320 	orr.w	r3, r3, #32
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	4833      	ldr	r0, [pc, #204]	@ (80046a8 <_printf_i+0x23c>)
 80045dc:	2778      	movs	r7, #120	@ 0x78
 80045de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	6831      	ldr	r1, [r6, #0]
 80045e6:	061f      	lsls	r7, r3, #24
 80045e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80045ec:	d402      	bmi.n	80045f4 <_printf_i+0x188>
 80045ee:	065f      	lsls	r7, r3, #25
 80045f0:	bf48      	it	mi
 80045f2:	b2ad      	uxthmi	r5, r5
 80045f4:	6031      	str	r1, [r6, #0]
 80045f6:	07d9      	lsls	r1, r3, #31
 80045f8:	bf44      	itt	mi
 80045fa:	f043 0320 	orrmi.w	r3, r3, #32
 80045fe:	6023      	strmi	r3, [r4, #0]
 8004600:	b11d      	cbz	r5, 800460a <_printf_i+0x19e>
 8004602:	2310      	movs	r3, #16
 8004604:	e7ac      	b.n	8004560 <_printf_i+0xf4>
 8004606:	4827      	ldr	r0, [pc, #156]	@ (80046a4 <_printf_i+0x238>)
 8004608:	e7e9      	b.n	80045de <_printf_i+0x172>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	f023 0320 	bic.w	r3, r3, #32
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	e7f6      	b.n	8004602 <_printf_i+0x196>
 8004614:	4616      	mov	r6, r2
 8004616:	e7bd      	b.n	8004594 <_printf_i+0x128>
 8004618:	6833      	ldr	r3, [r6, #0]
 800461a:	6825      	ldr	r5, [r4, #0]
 800461c:	6961      	ldr	r1, [r4, #20]
 800461e:	1d18      	adds	r0, r3, #4
 8004620:	6030      	str	r0, [r6, #0]
 8004622:	062e      	lsls	r6, r5, #24
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	d501      	bpl.n	800462c <_printf_i+0x1c0>
 8004628:	6019      	str	r1, [r3, #0]
 800462a:	e002      	b.n	8004632 <_printf_i+0x1c6>
 800462c:	0668      	lsls	r0, r5, #25
 800462e:	d5fb      	bpl.n	8004628 <_printf_i+0x1bc>
 8004630:	8019      	strh	r1, [r3, #0]
 8004632:	2300      	movs	r3, #0
 8004634:	6123      	str	r3, [r4, #16]
 8004636:	4616      	mov	r6, r2
 8004638:	e7bc      	b.n	80045b4 <_printf_i+0x148>
 800463a:	6833      	ldr	r3, [r6, #0]
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	6032      	str	r2, [r6, #0]
 8004640:	681e      	ldr	r6, [r3, #0]
 8004642:	6862      	ldr	r2, [r4, #4]
 8004644:	2100      	movs	r1, #0
 8004646:	4630      	mov	r0, r6
 8004648:	f7fb fde2 	bl	8000210 <memchr>
 800464c:	b108      	cbz	r0, 8004652 <_printf_i+0x1e6>
 800464e:	1b80      	subs	r0, r0, r6
 8004650:	6060      	str	r0, [r4, #4]
 8004652:	6863      	ldr	r3, [r4, #4]
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	2300      	movs	r3, #0
 8004658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800465c:	e7aa      	b.n	80045b4 <_printf_i+0x148>
 800465e:	6923      	ldr	r3, [r4, #16]
 8004660:	4632      	mov	r2, r6
 8004662:	4649      	mov	r1, r9
 8004664:	4640      	mov	r0, r8
 8004666:	47d0      	blx	sl
 8004668:	3001      	adds	r0, #1
 800466a:	d0ad      	beq.n	80045c8 <_printf_i+0x15c>
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	079b      	lsls	r3, r3, #30
 8004670:	d413      	bmi.n	800469a <_printf_i+0x22e>
 8004672:	68e0      	ldr	r0, [r4, #12]
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	4298      	cmp	r0, r3
 8004678:	bfb8      	it	lt
 800467a:	4618      	movlt	r0, r3
 800467c:	e7a6      	b.n	80045cc <_printf_i+0x160>
 800467e:	2301      	movs	r3, #1
 8004680:	4632      	mov	r2, r6
 8004682:	4649      	mov	r1, r9
 8004684:	4640      	mov	r0, r8
 8004686:	47d0      	blx	sl
 8004688:	3001      	adds	r0, #1
 800468a:	d09d      	beq.n	80045c8 <_printf_i+0x15c>
 800468c:	3501      	adds	r5, #1
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	9903      	ldr	r1, [sp, #12]
 8004692:	1a5b      	subs	r3, r3, r1
 8004694:	42ab      	cmp	r3, r5
 8004696:	dcf2      	bgt.n	800467e <_printf_i+0x212>
 8004698:	e7eb      	b.n	8004672 <_printf_i+0x206>
 800469a:	2500      	movs	r5, #0
 800469c:	f104 0619 	add.w	r6, r4, #25
 80046a0:	e7f5      	b.n	800468e <_printf_i+0x222>
 80046a2:	bf00      	nop
 80046a4:	08004a29 	.word	0x08004a29
 80046a8:	08004a3a 	.word	0x08004a3a

080046ac <__sflush_r>:
 80046ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b4:	0716      	lsls	r6, r2, #28
 80046b6:	4605      	mov	r5, r0
 80046b8:	460c      	mov	r4, r1
 80046ba:	d454      	bmi.n	8004766 <__sflush_r+0xba>
 80046bc:	684b      	ldr	r3, [r1, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	dc02      	bgt.n	80046c8 <__sflush_r+0x1c>
 80046c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	dd48      	ble.n	800475a <__sflush_r+0xae>
 80046c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046ca:	2e00      	cmp	r6, #0
 80046cc:	d045      	beq.n	800475a <__sflush_r+0xae>
 80046ce:	2300      	movs	r3, #0
 80046d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046d4:	682f      	ldr	r7, [r5, #0]
 80046d6:	6a21      	ldr	r1, [r4, #32]
 80046d8:	602b      	str	r3, [r5, #0]
 80046da:	d030      	beq.n	800473e <__sflush_r+0x92>
 80046dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	0759      	lsls	r1, r3, #29
 80046e2:	d505      	bpl.n	80046f0 <__sflush_r+0x44>
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	1ad2      	subs	r2, r2, r3
 80046e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046ea:	b10b      	cbz	r3, 80046f0 <__sflush_r+0x44>
 80046ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046f4:	6a21      	ldr	r1, [r4, #32]
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b0      	blx	r6
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	d106      	bne.n	800470e <__sflush_r+0x62>
 8004700:	6829      	ldr	r1, [r5, #0]
 8004702:	291d      	cmp	r1, #29
 8004704:	d82b      	bhi.n	800475e <__sflush_r+0xb2>
 8004706:	4a2a      	ldr	r2, [pc, #168]	@ (80047b0 <__sflush_r+0x104>)
 8004708:	410a      	asrs	r2, r1
 800470a:	07d6      	lsls	r6, r2, #31
 800470c:	d427      	bmi.n	800475e <__sflush_r+0xb2>
 800470e:	2200      	movs	r2, #0
 8004710:	6062      	str	r2, [r4, #4]
 8004712:	04d9      	lsls	r1, r3, #19
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	6022      	str	r2, [r4, #0]
 8004718:	d504      	bpl.n	8004724 <__sflush_r+0x78>
 800471a:	1c42      	adds	r2, r0, #1
 800471c:	d101      	bne.n	8004722 <__sflush_r+0x76>
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	b903      	cbnz	r3, 8004724 <__sflush_r+0x78>
 8004722:	6560      	str	r0, [r4, #84]	@ 0x54
 8004724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004726:	602f      	str	r7, [r5, #0]
 8004728:	b1b9      	cbz	r1, 800475a <__sflush_r+0xae>
 800472a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800472e:	4299      	cmp	r1, r3
 8004730:	d002      	beq.n	8004738 <__sflush_r+0x8c>
 8004732:	4628      	mov	r0, r5
 8004734:	f7ff fbf2 	bl	8003f1c <_free_r>
 8004738:	2300      	movs	r3, #0
 800473a:	6363      	str	r3, [r4, #52]	@ 0x34
 800473c:	e00d      	b.n	800475a <__sflush_r+0xae>
 800473e:	2301      	movs	r3, #1
 8004740:	4628      	mov	r0, r5
 8004742:	47b0      	blx	r6
 8004744:	4602      	mov	r2, r0
 8004746:	1c50      	adds	r0, r2, #1
 8004748:	d1c9      	bne.n	80046de <__sflush_r+0x32>
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0c6      	beq.n	80046de <__sflush_r+0x32>
 8004750:	2b1d      	cmp	r3, #29
 8004752:	d001      	beq.n	8004758 <__sflush_r+0xac>
 8004754:	2b16      	cmp	r3, #22
 8004756:	d11e      	bne.n	8004796 <__sflush_r+0xea>
 8004758:	602f      	str	r7, [r5, #0]
 800475a:	2000      	movs	r0, #0
 800475c:	e022      	b.n	80047a4 <__sflush_r+0xf8>
 800475e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004762:	b21b      	sxth	r3, r3
 8004764:	e01b      	b.n	800479e <__sflush_r+0xf2>
 8004766:	690f      	ldr	r7, [r1, #16]
 8004768:	2f00      	cmp	r7, #0
 800476a:	d0f6      	beq.n	800475a <__sflush_r+0xae>
 800476c:	0793      	lsls	r3, r2, #30
 800476e:	680e      	ldr	r6, [r1, #0]
 8004770:	bf08      	it	eq
 8004772:	694b      	ldreq	r3, [r1, #20]
 8004774:	600f      	str	r7, [r1, #0]
 8004776:	bf18      	it	ne
 8004778:	2300      	movne	r3, #0
 800477a:	eba6 0807 	sub.w	r8, r6, r7
 800477e:	608b      	str	r3, [r1, #8]
 8004780:	f1b8 0f00 	cmp.w	r8, #0
 8004784:	dde9      	ble.n	800475a <__sflush_r+0xae>
 8004786:	6a21      	ldr	r1, [r4, #32]
 8004788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800478a:	4643      	mov	r3, r8
 800478c:	463a      	mov	r2, r7
 800478e:	4628      	mov	r0, r5
 8004790:	47b0      	blx	r6
 8004792:	2800      	cmp	r0, #0
 8004794:	dc08      	bgt.n	80047a8 <__sflush_r+0xfc>
 8004796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800479a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a8:	4407      	add	r7, r0
 80047aa:	eba8 0800 	sub.w	r8, r8, r0
 80047ae:	e7e7      	b.n	8004780 <__sflush_r+0xd4>
 80047b0:	dfbffffe 	.word	0xdfbffffe

080047b4 <_fflush_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	690b      	ldr	r3, [r1, #16]
 80047b8:	4605      	mov	r5, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	b913      	cbnz	r3, 80047c4 <_fflush_r+0x10>
 80047be:	2500      	movs	r5, #0
 80047c0:	4628      	mov	r0, r5
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	b118      	cbz	r0, 80047ce <_fflush_r+0x1a>
 80047c6:	6a03      	ldr	r3, [r0, #32]
 80047c8:	b90b      	cbnz	r3, 80047ce <_fflush_r+0x1a>
 80047ca:	f7ff f9ad 	bl	8003b28 <__sinit>
 80047ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f3      	beq.n	80047be <_fflush_r+0xa>
 80047d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047d8:	07d0      	lsls	r0, r2, #31
 80047da:	d404      	bmi.n	80047e6 <_fflush_r+0x32>
 80047dc:	0599      	lsls	r1, r3, #22
 80047de:	d402      	bmi.n	80047e6 <_fflush_r+0x32>
 80047e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047e2:	f7ff fb98 	bl	8003f16 <__retarget_lock_acquire_recursive>
 80047e6:	4628      	mov	r0, r5
 80047e8:	4621      	mov	r1, r4
 80047ea:	f7ff ff5f 	bl	80046ac <__sflush_r>
 80047ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047f0:	07da      	lsls	r2, r3, #31
 80047f2:	4605      	mov	r5, r0
 80047f4:	d4e4      	bmi.n	80047c0 <_fflush_r+0xc>
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	059b      	lsls	r3, r3, #22
 80047fa:	d4e1      	bmi.n	80047c0 <_fflush_r+0xc>
 80047fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047fe:	f7ff fb8b 	bl	8003f18 <__retarget_lock_release_recursive>
 8004802:	e7dd      	b.n	80047c0 <_fflush_r+0xc>

08004804 <__swhatbuf_r>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	460c      	mov	r4, r1
 8004808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480c:	2900      	cmp	r1, #0
 800480e:	b096      	sub	sp, #88	@ 0x58
 8004810:	4615      	mov	r5, r2
 8004812:	461e      	mov	r6, r3
 8004814:	da0d      	bge.n	8004832 <__swhatbuf_r+0x2e>
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800481c:	f04f 0100 	mov.w	r1, #0
 8004820:	bf14      	ite	ne
 8004822:	2340      	movne	r3, #64	@ 0x40
 8004824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004828:	2000      	movs	r0, #0
 800482a:	6031      	str	r1, [r6, #0]
 800482c:	602b      	str	r3, [r5, #0]
 800482e:	b016      	add	sp, #88	@ 0x58
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	466a      	mov	r2, sp
 8004834:	f000 f848 	bl	80048c8 <_fstat_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	dbec      	blt.n	8004816 <__swhatbuf_r+0x12>
 800483c:	9901      	ldr	r1, [sp, #4]
 800483e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004846:	4259      	negs	r1, r3
 8004848:	4159      	adcs	r1, r3
 800484a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800484e:	e7eb      	b.n	8004828 <__swhatbuf_r+0x24>

08004850 <__smakebuf_r>:
 8004850:	898b      	ldrh	r3, [r1, #12]
 8004852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004854:	079d      	lsls	r5, r3, #30
 8004856:	4606      	mov	r6, r0
 8004858:	460c      	mov	r4, r1
 800485a:	d507      	bpl.n	800486c <__smakebuf_r+0x1c>
 800485c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	2301      	movs	r3, #1
 8004866:	6163      	str	r3, [r4, #20]
 8004868:	b003      	add	sp, #12
 800486a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800486c:	ab01      	add	r3, sp, #4
 800486e:	466a      	mov	r2, sp
 8004870:	f7ff ffc8 	bl	8004804 <__swhatbuf_r>
 8004874:	9f00      	ldr	r7, [sp, #0]
 8004876:	4605      	mov	r5, r0
 8004878:	4639      	mov	r1, r7
 800487a:	4630      	mov	r0, r6
 800487c:	f7ff fbba 	bl	8003ff4 <_malloc_r>
 8004880:	b948      	cbnz	r0, 8004896 <__smakebuf_r+0x46>
 8004882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004886:	059a      	lsls	r2, r3, #22
 8004888:	d4ee      	bmi.n	8004868 <__smakebuf_r+0x18>
 800488a:	f023 0303 	bic.w	r3, r3, #3
 800488e:	f043 0302 	orr.w	r3, r3, #2
 8004892:	81a3      	strh	r3, [r4, #12]
 8004894:	e7e2      	b.n	800485c <__smakebuf_r+0xc>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	6020      	str	r0, [r4, #0]
 800489a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	9b01      	ldr	r3, [sp, #4]
 80048a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048a6:	b15b      	cbz	r3, 80048c0 <__smakebuf_r+0x70>
 80048a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 f81d 	bl	80048ec <_isatty_r>
 80048b2:	b128      	cbz	r0, 80048c0 <__smakebuf_r+0x70>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	431d      	orrs	r5, r3
 80048c4:	81a5      	strh	r5, [r4, #12]
 80048c6:	e7cf      	b.n	8004868 <__smakebuf_r+0x18>

080048c8 <_fstat_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d07      	ldr	r5, [pc, #28]	@ (80048e8 <_fstat_r+0x20>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	4611      	mov	r1, r2
 80048d4:	602b      	str	r3, [r5, #0]
 80048d6:	f7fc fa40 	bl	8000d5a <_fstat>
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	d102      	bne.n	80048e4 <_fstat_r+0x1c>
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	b103      	cbz	r3, 80048e4 <_fstat_r+0x1c>
 80048e2:	6023      	str	r3, [r4, #0]
 80048e4:	bd38      	pop	{r3, r4, r5, pc}
 80048e6:	bf00      	nop
 80048e8:	200002b4 	.word	0x200002b4

080048ec <_isatty_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d06      	ldr	r5, [pc, #24]	@ (8004908 <_isatty_r+0x1c>)
 80048f0:	2300      	movs	r3, #0
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	f7fc fa3f 	bl	8000d7a <_isatty>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_isatty_r+0x1a>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_isatty_r+0x1a>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	200002b4 	.word	0x200002b4

0800490c <_sbrk_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4d06      	ldr	r5, [pc, #24]	@ (8004928 <_sbrk_r+0x1c>)
 8004910:	2300      	movs	r3, #0
 8004912:	4604      	mov	r4, r0
 8004914:	4608      	mov	r0, r1
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	f7fc fa48 	bl	8000dac <_sbrk>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_sbrk_r+0x1a>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_sbrk_r+0x1a>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	200002b4 	.word	0x200002b4

0800492c <_init>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr

08004938 <_fini>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr
